/*
 * openEO API
 * The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.   **Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:  * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.2/cors/index.html) to allow browser-based access to the API.  * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.2/errors/index.html)  * Unless otherwise stated the API works *case sensitive*.
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: openeo@list.tuwien.ac.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.openeo.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * STACSARBand
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-07-22T13:33:50.326+02:00[Europe/Rome]")
public class STACSARBand  implements Serializable {
  @JsonProperty("name")
  private String name;

  @JsonProperty("description")
  private String description;

  @JsonProperty("data_type")
  private String dataType;

  @JsonProperty("unit")
  private String unit;

  /**
   * The polarization of the band, either &#x60;HH&#x60;, &#x60;VV&#x60;, &#x60;HV&#x60;, &#x60;VH&#x60; or &#x60;null&#x60; if not applicable.
   */
  public enum PolarizationEnum {
    HH("HH"),
    
    VV("VV"),
    
    HV("HV"),
    
    VH("VH");

    private String value;

    PolarizationEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PolarizationEnum fromValue(String value) {
      for (PolarizationEnum b : PolarizationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("polarization")
  private PolarizationEnum polarization;

  public STACSARBand name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the band.
   * @return name
   **/
  @JsonProperty("name")
  @ApiModelProperty(value = "The name of the band.")
  
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public STACSARBand description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description to fully explain the band, should include processing information.  [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation.
   * @return description
   **/
  @JsonProperty("description")
  @ApiModelProperty(value = "Description to fully explain the band, should include processing information.  [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation.")
  
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public STACSARBand dataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Specifies the type of the data contained in the band, for example &#x60;amplitude&#x60;, &#x60;intensity&#x60;, &#x60;phase&#x60;, &#x60;angle&#x60;, &#x60;sigma0&#x60;, &#x60;gamma0&#x60;.
   * @return dataType
   **/
  @JsonProperty("data_type")
  @ApiModelProperty(value = "Specifies the type of the data contained in the band, for example `amplitude`, `intensity`, `phase`, `angle`, `sigma0`, `gamma0`.")
  
  public String getDataType() {
    return dataType;
  }

  public void setDataType(String dataType) {
    this.dataType = dataType;
  }

  public STACSARBand unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * The unit of measurement for the data, preferably the symbols from [SI](https://physics.nist.gov/cuu/Units/units.html) or [UDUNITS](https://ncics.org/portfolio/other-resources/udunits2/).
   * @return unit
   **/
  @JsonProperty("unit")
  @ApiModelProperty(value = "The unit of measurement for the data, preferably the symbols from [SI](https://physics.nist.gov/cuu/Units/units.html) or [UDUNITS](https://ncics.org/portfolio/other-resources/udunits2/).")
  
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }

  public STACSARBand polarization(PolarizationEnum polarization) {
    this.polarization = polarization;
    return this;
  }

  /**
   * The polarization of the band, either &#x60;HH&#x60;, &#x60;VV&#x60;, &#x60;HV&#x60;, &#x60;VH&#x60; or &#x60;null&#x60; if not applicable.
   * @return polarization
   **/
  @JsonProperty("polarization")
  @ApiModelProperty(value = "The polarization of the band, either `HH`, `VV`, `HV`, `VH` or `null` if not applicable.")
  
  public PolarizationEnum getPolarization() {
    return polarization;
  }

  public void setPolarization(PolarizationEnum polarization) {
    this.polarization = polarization;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    STACSARBand stACSARBand = (STACSARBand) o;
    return Objects.equals(this.name, stACSARBand.name) &&
        Objects.equals(this.description, stACSARBand.description) &&
        Objects.equals(this.dataType, stACSARBand.dataType) &&
        Objects.equals(this.unit, stACSARBand.unit) &&
        Objects.equals(this.polarization, stACSARBand.polarization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, dataType, unit, polarization);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class STACSARBand {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    polarization: ").append(toIndentedString(polarization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

