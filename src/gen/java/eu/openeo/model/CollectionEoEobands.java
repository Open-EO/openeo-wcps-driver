/*
 * openEO API
 * The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.   **Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:  * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.0/cors/index.html) to allow browser-based access to the API.  * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.0/errors/index.html)  * Unless otherwise stated the API works *case sensitive*.
 *
 * OpenAPI spec version: 0.4.0
 * Contact: openeo@list.tuwien.ac.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.openeo.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * CollectionEoEobands
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-02-12T13:52:55.621+01:00[Europe/Rome]")
public class CollectionEoEobands  implements Serializable {
  @JsonProperty("name")
  private String name;

  @JsonProperty("common_name")
  private String commonName;

  @JsonProperty("description")
  private String description;

  @JsonProperty("gsd")
  private BigDecimal gsd;

  @JsonProperty("accuracy")
  private BigDecimal accuracy;

  @JsonProperty("center_wavelength")
  private BigDecimal centerWavelength;

  @JsonProperty("full_width_half_max")
  private BigDecimal fullWidthHalfMax;

  @JsonProperty("offset")
  private BigDecimal offset = new BigDecimal(0d);

  @JsonProperty("scale")
  private BigDecimal scale = new BigDecimal(1d);

  @JsonProperty("unit")
  private String unit;

  @JsonProperty("nodata")
  private List<BigDecimal> nodata = null;

  @JsonProperty("periodicity")
  private String periodicity;

  public CollectionEoEobands name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the band (e.g., \&quot;B01\&quot;, \&quot;B02\&quot;, \&quot;B1\&quot;, \&quot;B5\&quot;, \&quot;QA\&quot;).
   * @return name
   **/
  @JsonProperty("name")
  @ApiModelProperty(value = "The name of the band (e.g., \"B01\", \"B02\", \"B1\", \"B5\", \"QA\").")
  
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CollectionEoEobands commonName(String commonName) {
    this.commonName = commonName;
    return this;
  }

  /**
   * Not required, but **STRONGLY RECOMMENDED**! The name commonly used to refer to the band to make it easier to search for bands across instruments. See the \&quot;[Common Band Names](https://github.com/radiantearth/stac-spec/tree/master/extensions/eo#common-band-names)\&quot; for a list of accepted common names.
   * @return commonName
   **/
  @JsonProperty("common_name")
  @ApiModelProperty(value = "Not required, but **STRONGLY RECOMMENDED**! The name commonly used to refer to the band to make it easier to search for bands across instruments. See the \"[Common Band Names](https://github.com/radiantearth/stac-spec/tree/master/extensions/eo#common-band-names)\" for a list of accepted common names.")
  
  public String getCommonName() {
    return commonName;
  }

  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }

  public CollectionEoEobands description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Detailed description to fully explain the entity.  [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation.
   * @return description
   **/
  @JsonProperty("description")
  @ApiModelProperty(example = "Deriving minimum NDVI measurements over pixel time series of Sentinel 2", value = "Detailed description to fully explain the entity.  [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation.")
  
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CollectionEoEobands gsd(BigDecimal gsd) {
    this.gsd = gsd;
    return this;
  }

  /**
   * Ground Sample distance, the nominal distance between pixel centers available, in meters. See eo:gsd for more information. Defaults to eo:gsd if not provided.
   * @return gsd
   **/
  @JsonProperty("gsd")
  @ApiModelProperty(value = "Ground Sample distance, the nominal distance between pixel centers available, in meters. See eo:gsd for more information. Defaults to eo:gsd if not provided.")
  @Valid
  public BigDecimal getGsd() {
    return gsd;
  }

  public void setGsd(BigDecimal gsd) {
    this.gsd = gsd;
  }

  public CollectionEoEobands accuracy(BigDecimal accuracy) {
    this.accuracy = accuracy;
    return this;
  }

  /**
   * The expected error between the measured location and the true location of a pixel, in meters on the ground.
   * @return accuracy
   **/
  @JsonProperty("accuracy")
  @ApiModelProperty(value = "The expected error between the measured location and the true location of a pixel, in meters on the ground.")
  @Valid
  public BigDecimal getAccuracy() {
    return accuracy;
  }

  public void setAccuracy(BigDecimal accuracy) {
    this.accuracy = accuracy;
  }

  public CollectionEoEobands centerWavelength(BigDecimal centerWavelength) {
    this.centerWavelength = centerWavelength;
    return this;
  }

  /**
   * The center wavelength of the band, in micrometers (μm).
   * @return centerWavelength
   **/
  @JsonProperty("center_wavelength")
  @ApiModelProperty(value = "The center wavelength of the band, in micrometers (μm).")
  @Valid
  public BigDecimal getCenterWavelength() {
    return centerWavelength;
  }

  public void setCenterWavelength(BigDecimal centerWavelength) {
    this.centerWavelength = centerWavelength;
  }

  public CollectionEoEobands fullWidthHalfMax(BigDecimal fullWidthHalfMax) {
    this.fullWidthHalfMax = fullWidthHalfMax;
    return this;
  }

  /**
   * Full width at half maximum (FWHM) is a common way to describe the size of a spectral band. It is the width, in micrometers (μm), of the bandpass measured at a half of the maximum transmission. Thus, if the maximum transmission of the bandpass was 80%, the FWHM is measured as the width of the bandpass at 40% transmission.
   * @return fullWidthHalfMax
   **/
  @JsonProperty("full_width_half_max")
  @ApiModelProperty(value = "Full width at half maximum (FWHM) is a common way to describe the size of a spectral band. It is the width, in micrometers (μm), of the bandpass measured at a half of the maximum transmission. Thus, if the maximum transmission of the bandpass was 80%, the FWHM is measured as the width of the bandpass at 40% transmission.")
  @Valid
  public BigDecimal getFullWidthHalfMax() {
    return fullWidthHalfMax;
  }

  public void setFullWidthHalfMax(BigDecimal fullWidthHalfMax) {
    this.fullWidthHalfMax = fullWidthHalfMax;
  }

  public CollectionEoEobands offset(BigDecimal offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Offset to convert band values to the actual measurement scale.
   * @return offset
   **/
  @JsonProperty("offset")
  @ApiModelProperty(value = "Offset to convert band values to the actual measurement scale.")
  @Valid
  public BigDecimal getOffset() {
    return offset;
  }

  public void setOffset(BigDecimal offset) {
    this.offset = offset;
  }

  public CollectionEoEobands scale(BigDecimal scale) {
    this.scale = scale;
    return this;
  }

  /**
   * Scale to convert band values to the actual measurement scale.
   * @return scale
   **/
  @JsonProperty("scale")
  @ApiModelProperty(value = "Scale to convert band values to the actual measurement scale.")
  @Valid
  public BigDecimal getScale() {
    return scale;
  }

  public void setScale(BigDecimal scale) {
    this.scale = scale;
  }

  public CollectionEoEobands unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * The unit of measurement for the data, specified as [OGC URN](http://www.opengis.net/def/uom/).
   * @return unit
   **/
  @JsonProperty("unit")
  @ApiModelProperty(value = "The unit of measurement for the data, specified as [OGC URN](http://www.opengis.net/def/uom/).")
  
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }

  public CollectionEoEobands nodata(List<BigDecimal> nodata) {
    this.nodata = nodata;
    return this;
  }

  public CollectionEoEobands addNodataItem(BigDecimal nodataItem) {
    if (this.nodata == null) {
      this.nodata = new ArrayList<BigDecimal>();
    }
    this.nodata.add(nodataItem);
    return this;
  }

  /**
   * Specific values representing no data.
   * @return nodata
   **/
  @JsonProperty("nodata")
  @ApiModelProperty(value = "Specific values representing no data.")
  @Valid
  public List<BigDecimal> getNodata() {
    return nodata;
  }

  public void setNodata(List<BigDecimal> nodata) {
    this.nodata = nodata;
  }

  public CollectionEoEobands periodicity(String periodicity) {
    this.periodicity = periodicity;
    return this;
  }

  /**
   * Periodictity of the measurements, preferably specified using ISO 8601.
   * @return periodicity
   **/
  @JsonProperty("periodicity")
  @ApiModelProperty(value = "Periodictity of the measurements, preferably specified using ISO 8601.")
  
  public String getPeriodicity() {
    return periodicity;
  }

  public void setPeriodicity(String periodicity) {
    this.periodicity = periodicity;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectionEoEobands collectionEoEobands = (CollectionEoEobands) o;
    return Objects.equals(this.name, collectionEoEobands.name) &&
        Objects.equals(this.commonName, collectionEoEobands.commonName) &&
        Objects.equals(this.description, collectionEoEobands.description) &&
        Objects.equals(this.gsd, collectionEoEobands.gsd) &&
        Objects.equals(this.accuracy, collectionEoEobands.accuracy) &&
        Objects.equals(this.centerWavelength, collectionEoEobands.centerWavelength) &&
        Objects.equals(this.fullWidthHalfMax, collectionEoEobands.fullWidthHalfMax) &&
        Objects.equals(this.offset, collectionEoEobands.offset) &&
        Objects.equals(this.scale, collectionEoEobands.scale) &&
        Objects.equals(this.unit, collectionEoEobands.unit) &&
        Objects.equals(this.nodata, collectionEoEobands.nodata) &&
        Objects.equals(this.periodicity, collectionEoEobands.periodicity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, commonName, description, gsd, accuracy, centerWavelength, fullWidthHalfMax, offset, scale, unit, nodata, periodicity);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectionEoEobands {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    gsd: ").append(toIndentedString(gsd)).append("\n");
    sb.append("    accuracy: ").append(toIndentedString(accuracy)).append("\n");
    sb.append("    centerWavelength: ").append(toIndentedString(centerWavelength)).append("\n");
    sb.append("    fullWidthHalfMax: ").append(toIndentedString(fullWidthHalfMax)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    nodata: ").append(toIndentedString(nodata)).append("\n");
    sb.append("    periodicity: ").append(toIndentedString(periodicity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

