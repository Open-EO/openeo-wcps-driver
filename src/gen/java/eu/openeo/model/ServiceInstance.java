/*
 * openEO API
 * The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.   **Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:  * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.2/cors/index.html) to allow browser-based access to the API.  * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.2/errors/index.html)  * Unless otherwise stated the API works *case sensitive*.
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: openeo@list.tuwien.ac.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.openeo.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * ServiceInstance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-07-22T13:33:50.326+02:00[Europe/Rome]")
public class ServiceInstance  implements Serializable {
  @JsonProperty("url")
  private String url;

  @JsonProperty("production")
  private Boolean production = true;

  @JsonProperty("api_version")
  private String apiVersion;

  public ServiceInstance url(String url) {
    this.url = url;
    return this;
  }

  /**
   * *Absolute* URLs to the service.
   * @return url
   **/
  @JsonProperty("url")
  @ApiModelProperty(example = "https://example.com/api/v0.4", required = true, value = "*Absolute* URLs to the service.")
  @NotNull 
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public ServiceInstance production(Boolean production) {
    this.production = production;
    return this;
  }

  /**
   * Specifies whether the implementation is ready to be used in production use (&#x60;true&#x60;) or not (&#x60;false&#x60;). Clients SHOULD only connect to non-production implementations if the user explicetly confirmed to use a non-production implementation.
   * @return production
   **/
  @JsonProperty("production")
  @ApiModelProperty(value = "Specifies whether the implementation is ready to be used in production use (`true`) or not (`false`). Clients SHOULD only connect to non-production implementations if the user explicetly confirmed to use a non-production implementation.")
  
  public Boolean getProduction() {
    return production;
  }

  public void setProduction(Boolean production) {
    this.production = production;
  }

  public ServiceInstance apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * Version number of the openEO specification this back-end implements.
   * @return apiVersion
   **/
  @JsonProperty("api_version")
  @ApiModelProperty(example = "0.4.2", required = true, value = "Version number of the openEO specification this back-end implements.")
  @NotNull 
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceInstance serviceInstance = (ServiceInstance) o;
    return Objects.equals(this.url, serviceInstance.url) &&
        Objects.equals(this.production, serviceInstance.production) &&
        Objects.equals(this.apiVersion, serviceInstance.apiVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, production, apiVersion);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceInstance {\n");
    
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    production: ").append(toIndentedString(production)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

