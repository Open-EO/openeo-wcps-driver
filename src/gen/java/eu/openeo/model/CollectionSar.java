/*
 * openEO API
 * The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.   **Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:  * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.2/cors/index.html) to allow browser-based access to the API.  * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.2/errors/index.html)  * Unless otherwise stated the API works *case sensitive*.
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: openeo@list.tuwien.ac.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.openeo.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import eu.openeo.model.STACSARBand;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * CollectionSar
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-07-22T13:33:50.326+02:00[Europe/Rome]")
public class CollectionSar  implements Serializable {
  @JsonProperty("sar:platform")
  private String sarColonPlatform;

  @JsonProperty("sar:constellation")
  private String sarColonConstellation;

  @JsonProperty("sar:instrument")
  private String sarColonInstrument;

  @JsonProperty("sar:instrument_mode")
  private String sarColonInstrumentMode;

  /**
   * The common name for the frequency band to make it easier to search for bands across instruments. See section \&quot;[Common Frequency Band Names](https://github.com/radiantearth/stac-spec/tree/master/extensions/sar/README.md#common-frequency-band-names)\&quot; for a list of accepted names.
   */
  public enum SarColonFrequencyBandEnum {
    P("P"),
    
    L("L"),
    
    S("S"),
    
    C("C"),
    
    X("X"),
    
    KU("Ku"),
    
    K("K"),
    
    KA("Ka");

    private String value;

    SarColonFrequencyBandEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SarColonFrequencyBandEnum fromValue(String value) {
      for (SarColonFrequencyBandEnum b : SarColonFrequencyBandEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("sar:frequency_band")
  private SarColonFrequencyBandEnum sarColonFrequencyBand;

  @JsonProperty("sar:center_wavelength")
  private BigDecimal sarColonCenterWavelength;

  @JsonProperty("sar:center_frequency")
  private BigDecimal sarColonCenterFrequency;

  /**
   * Gets or Sets sarColonPolarization
   */
  public enum SarColonPolarizationEnum {
    HH("HH"),
    
    VV("VV"),
    
    HV("HV"),
    
    VH("VH");

    private String value;

    SarColonPolarizationEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SarColonPolarizationEnum fromValue(String value) {
      for (SarColonPolarizationEnum b : SarColonPolarizationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("sar:polarization")
  private List<SarColonPolarizationEnum> sarColonPolarization = new ArrayList<SarColonPolarizationEnum>();

  @JsonProperty("sar:bands")
  private List<STACSARBand> sarColonBands = null;

  @JsonProperty("sar:type")
  private String sarColonType;

  @JsonProperty("sar:resolution")
  private List<BigDecimal> sarColonResolution = null;

  @JsonProperty("sar:pixel_spacing")
  private List<BigDecimal> sarColonPixelSpacing = null;

  @JsonProperty("sar:looks")
  private List<BigDecimal> sarColonLooks = null;

  public CollectionSar sarColonPlatform(String sarColonPlatform) {
    this.sarColonPlatform = sarColonPlatform;
    return this;
  }

  /**
   * Unique name of the specific platform the instrument is attached to. For satellites this would be the name of the satellite (e.g., landsat-8, sentinel-2A), whereas for drones this would be a unique name for the drone.
   * @return sarColonPlatform
   **/
  @JsonProperty("sar:platform")
  @ApiModelProperty(required = true, value = "Unique name of the specific platform the instrument is attached to. For satellites this would be the name of the satellite (e.g., landsat-8, sentinel-2A), whereas for drones this would be a unique name for the drone.")
  @NotNull 
  public String getSarColonPlatform() {
    return sarColonPlatform;
  }

  public void setSarColonPlatform(String sarColonPlatform) {
    this.sarColonPlatform = sarColonPlatform;
  }

  public CollectionSar sarColonConstellation(String sarColonConstellation) {
    this.sarColonConstellation = sarColonConstellation;
    return this;
  }

  /**
   * sar:constellation is the name of the group of satellites that have similar payloads and have their orbits arranged in a way to increase the temporal resolution of acquisitions of data with similar geometric and radiometric characteristics. Examples are the Sentinel-1 constellation, which has S1A, S1B, S1C and S1D and RADARSAT, which has RADARSAT-1 and RADARSAT-2. This field allows users to search for Sentinel-1 data, for example, without needing to specify which specific platform the data came from.
   * @return sarColonConstellation
   **/
  @JsonProperty("sar:constellation")
  @ApiModelProperty(value = "sar:constellation is the name of the group of satellites that have similar payloads and have their orbits arranged in a way to increase the temporal resolution of acquisitions of data with similar geometric and radiometric characteristics. Examples are the Sentinel-1 constellation, which has S1A, S1B, S1C and S1D and RADARSAT, which has RADARSAT-1 and RADARSAT-2. This field allows users to search for Sentinel-1 data, for example, without needing to specify which specific platform the data came from.")
  
  public String getSarColonConstellation() {
    return sarColonConstellation;
  }

  public void setSarColonConstellation(String sarColonConstellation) {
    this.sarColonConstellation = sarColonConstellation;
  }

  public CollectionSar sarColonInstrument(String sarColonInstrument) {
    this.sarColonInstrument = sarColonInstrument;
    return this;
  }

  /**
   * Name of the sensor used, although for Items which contain data from multiple sensors this could also name multiple sensors.
   * @return sarColonInstrument
   **/
  @JsonProperty("sar:instrument")
  @ApiModelProperty(required = true, value = "Name of the sensor used, although for Items which contain data from multiple sensors this could also name multiple sensors.")
  @NotNull 
  public String getSarColonInstrument() {
    return sarColonInstrument;
  }

  public void setSarColonInstrument(String sarColonInstrument) {
    this.sarColonInstrument = sarColonInstrument;
  }

  public CollectionSar sarColonInstrumentMode(String sarColonInstrumentMode) {
    this.sarColonInstrumentMode = sarColonInstrumentMode;
    return this;
  }

  /**
   * The name of the sensor acquisition mode that is commonly used. This should be the short name, if available. For example, WV for \&quot;Wave mode\&quot; of Sentinel-1 and Envisat ASAR satellites.
   * @return sarColonInstrumentMode
   **/
  @JsonProperty("sar:instrument_mode")
  @ApiModelProperty(example = "WV", required = true, value = "The name of the sensor acquisition mode that is commonly used. This should be the short name, if available. For example, WV for \"Wave mode\" of Sentinel-1 and Envisat ASAR satellites.")
  @NotNull 
  public String getSarColonInstrumentMode() {
    return sarColonInstrumentMode;
  }

  public void setSarColonInstrumentMode(String sarColonInstrumentMode) {
    this.sarColonInstrumentMode = sarColonInstrumentMode;
  }

  public CollectionSar sarColonFrequencyBand(SarColonFrequencyBandEnum sarColonFrequencyBand) {
    this.sarColonFrequencyBand = sarColonFrequencyBand;
    return this;
  }

  /**
   * The common name for the frequency band to make it easier to search for bands across instruments. See section \&quot;[Common Frequency Band Names](https://github.com/radiantearth/stac-spec/tree/master/extensions/sar/README.md#common-frequency-band-names)\&quot; for a list of accepted names.
   * @return sarColonFrequencyBand
   **/
  @JsonProperty("sar:frequency_band")
  @ApiModelProperty(required = true, value = "The common name for the frequency band to make it easier to search for bands across instruments. See section \"[Common Frequency Band Names](https://github.com/radiantearth/stac-spec/tree/master/extensions/sar/README.md#common-frequency-band-names)\" for a list of accepted names.")
  @NotNull 
  public SarColonFrequencyBandEnum getSarColonFrequencyBand() {
    return sarColonFrequencyBand;
  }

  public void setSarColonFrequencyBand(SarColonFrequencyBandEnum sarColonFrequencyBand) {
    this.sarColonFrequencyBand = sarColonFrequencyBand;
  }

  public CollectionSar sarColonCenterWavelength(BigDecimal sarColonCenterWavelength) {
    this.sarColonCenterWavelength = sarColonCenterWavelength;
    return this;
  }

  /**
   * The center wavelength of the instrument, in centimeters (cm).
   * @return sarColonCenterWavelength
   **/
  @JsonProperty("sar:center_wavelength")
  @ApiModelProperty(value = "The center wavelength of the instrument, in centimeters (cm).")
  @Valid 
  public BigDecimal getSarColonCenterWavelength() {
    return sarColonCenterWavelength;
  }

  public void setSarColonCenterWavelength(BigDecimal sarColonCenterWavelength) {
    this.sarColonCenterWavelength = sarColonCenterWavelength;
  }

  public CollectionSar sarColonCenterFrequency(BigDecimal sarColonCenterFrequency) {
    this.sarColonCenterFrequency = sarColonCenterFrequency;
    return this;
  }

  /**
   * The center frequency of the instrument, in gigahertz (GHz).
   * @return sarColonCenterFrequency
   **/
  @JsonProperty("sar:center_frequency")
  @ApiModelProperty(value = "The center frequency of the instrument, in gigahertz (GHz).")
  @Valid 
  public BigDecimal getSarColonCenterFrequency() {
    return sarColonCenterFrequency;
  }

  public void setSarColonCenterFrequency(BigDecimal sarColonCenterFrequency) {
    this.sarColonCenterFrequency = sarColonCenterFrequency;
  }

  public CollectionSar sarColonPolarization(List<SarColonPolarizationEnum> sarColonPolarization) {
    this.sarColonPolarization = sarColonPolarization;
    return this;
  }

  public CollectionSar addSarColonPolarizationItem(SarColonPolarizationEnum sarColonPolarizationItem) {
    this.sarColonPolarization.add(sarColonPolarizationItem);
    return this;
  }

  /**
   * A single polarization or a polarization combinations specified as array. For single polarized radars one of &#x60;HH&#x60;, &#x60;VV&#x60;, &#x60;HV&#x60; or &#x60;VH&#x60; must be set. Fully polarimetric radars add all four polarizations to the array. Dual polarized radars and alternating polarization add the corresponding polarizations to the array, for instance for &#x60;HH+HV&#x60; add both &#x60;HH&#x60; and &#x60;HV&#x60;.
   * @return sarColonPolarization
   **/
  @JsonProperty("sar:polarization")
  @ApiModelProperty(required = true, value = "A single polarization or a polarization combinations specified as array. For single polarized radars one of `HH`, `VV`, `HV` or `VH` must be set. Fully polarimetric radars add all four polarizations to the array. Dual polarized radars and alternating polarization add the corresponding polarizations to the array, for instance for `HH+HV` add both `HH` and `HV`.")
  @NotNull  @Size(min=1,max=4)
  public List<SarColonPolarizationEnum> getSarColonPolarization() {
    return sarColonPolarization;
  }

  public void setSarColonPolarization(List<SarColonPolarizationEnum> sarColonPolarization) {
    this.sarColonPolarization = sarColonPolarization;
  }

  public CollectionSar sarColonBands(List<STACSARBand> sarColonBands) {
    this.sarColonBands = sarColonBands;
    return this;
  }

  public CollectionSar addSarColonBandsItem(STACSARBand sarColonBandsItem) {
    if (this.sarColonBands == null) {
      this.sarColonBands = new ArrayList<STACSARBand>();
    }
    this.sarColonBands.add(sarColonBandsItem);
    return this;
  }

  /**
   * This is a list of the available bands where each item is a Band Object.
   * @return sarColonBands
   **/
  @JsonProperty("sar:bands")
  @ApiModelProperty(value = "This is a list of the available bands where each item is a Band Object.")
  @Valid 
  public List<STACSARBand> getSarColonBands() {
    return sarColonBands;
  }

  public void setSarColonBands(List<STACSARBand> sarColonBands) {
    this.sarColonBands = sarColonBands;
  }

  public CollectionSar sarColonType(String sarColonType) {
    this.sarColonType = sarColonType;
    return this;
  }

  /**
   * The product type, for example &#x60;RAW&#x60;, &#x60;GRD&#x60;, &#x60;OCN&#x60; or &#x60;SLC&#x60; for Sentinel-1.
   * @return sarColonType
   **/
  @JsonProperty("sar:type")
  @ApiModelProperty(required = true, value = "The product type, for example `RAW`, `GRD`, `OCN` or `SLC` for Sentinel-1.")
  @NotNull 
  public String getSarColonType() {
    return sarColonType;
  }

  public void setSarColonType(String sarColonType) {
    this.sarColonType = sarColonType;
  }

  public CollectionSar sarColonResolution(List<BigDecimal> sarColonResolution) {
    this.sarColonResolution = sarColonResolution;
    return this;
  }

  public CollectionSar addSarColonResolutionItem(BigDecimal sarColonResolutionItem) {
    if (this.sarColonResolution == null) {
      this.sarColonResolution = new ArrayList<BigDecimal>();
    }
    this.sarColonResolution.add(sarColonResolutionItem);
    return this;
  }

  /**
   * The maximum ability to distinguish two adjacent targets, in meters (m). The first element of the array is the range resolution, the second element is the azimuth resolution.
   * @return sarColonResolution
   **/
  @JsonProperty("sar:resolution")
  @ApiModelProperty(value = "The maximum ability to distinguish two adjacent targets, in meters (m). The first element of the array is the range resolution, the second element is the azimuth resolution.")
  @Valid  @Size(min=2,max=2)
  public List<BigDecimal> getSarColonResolution() {
    return sarColonResolution;
  }

  public void setSarColonResolution(List<BigDecimal> sarColonResolution) {
    this.sarColonResolution = sarColonResolution;
  }

  public CollectionSar sarColonPixelSpacing(List<BigDecimal> sarColonPixelSpacing) {
    this.sarColonPixelSpacing = sarColonPixelSpacing;
    return this;
  }

  public CollectionSar addSarColonPixelSpacingItem(BigDecimal sarColonPixelSpacingItem) {
    if (this.sarColonPixelSpacing == null) {
      this.sarColonPixelSpacing = new ArrayList<BigDecimal>();
    }
    this.sarColonPixelSpacing.add(sarColonPixelSpacingItem);
    return this;
  }

  /**
   * The distance between adjacent pixels, in meters (m). The first element of the array is the range pixel spacing, the second element is the azimuth pixel spacing. Strongly RECOMMENDED to be specified for products of type &#x60;GRD&#x60;.
   * @return sarColonPixelSpacing
   **/
  @JsonProperty("sar:pixel_spacing")
  @ApiModelProperty(value = "The distance between adjacent pixels, in meters (m). The first element of the array is the range pixel spacing, the second element is the azimuth pixel spacing. Strongly RECOMMENDED to be specified for products of type `GRD`.")
  @Valid  @Size(min=2,max=2)
  public List<BigDecimal> getSarColonPixelSpacing() {
    return sarColonPixelSpacing;
  }

  public void setSarColonPixelSpacing(List<BigDecimal> sarColonPixelSpacing) {
    this.sarColonPixelSpacing = sarColonPixelSpacing;
  }

  public CollectionSar sarColonLooks(List<BigDecimal> sarColonLooks) {
    this.sarColonLooks = sarColonLooks;
    return this;
  }

  public CollectionSar addSarColonLooksItem(BigDecimal sarColonLooksItem) {
    if (this.sarColonLooks == null) {
      this.sarColonLooks = new ArrayList<BigDecimal>();
    }
    this.sarColonLooks.add(sarColonLooksItem);
    return this;
  }

  /**
   * The number of groups of signal samples (looks). The first element of the array must be the number of range looks, the second element must be the number of azimuth looks, the optional third element is the equivalent number of looks (ENL).
   * @return sarColonLooks
   **/
  @JsonProperty("sar:looks")
  @ApiModelProperty(value = "The number of groups of signal samples (looks). The first element of the array must be the number of range looks, the second element must be the number of azimuth looks, the optional third element is the equivalent number of looks (ENL).")
  @Valid  @Size(min=2,max=3)
  public List<BigDecimal> getSarColonLooks() {
    return sarColonLooks;
  }

  public void setSarColonLooks(List<BigDecimal> sarColonLooks) {
    this.sarColonLooks = sarColonLooks;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectionSar collectionSar = (CollectionSar) o;
    return Objects.equals(this.sarColonPlatform, collectionSar.sarColonPlatform) &&
        Objects.equals(this.sarColonConstellation, collectionSar.sarColonConstellation) &&
        Objects.equals(this.sarColonInstrument, collectionSar.sarColonInstrument) &&
        Objects.equals(this.sarColonInstrumentMode, collectionSar.sarColonInstrumentMode) &&
        Objects.equals(this.sarColonFrequencyBand, collectionSar.sarColonFrequencyBand) &&
        Objects.equals(this.sarColonCenterWavelength, collectionSar.sarColonCenterWavelength) &&
        Objects.equals(this.sarColonCenterFrequency, collectionSar.sarColonCenterFrequency) &&
        Objects.equals(this.sarColonPolarization, collectionSar.sarColonPolarization) &&
        Objects.equals(this.sarColonBands, collectionSar.sarColonBands) &&
        Objects.equals(this.sarColonType, collectionSar.sarColonType) &&
        Objects.equals(this.sarColonResolution, collectionSar.sarColonResolution) &&
        Objects.equals(this.sarColonPixelSpacing, collectionSar.sarColonPixelSpacing) &&
        Objects.equals(this.sarColonLooks, collectionSar.sarColonLooks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sarColonPlatform, sarColonConstellation, sarColonInstrument, sarColonInstrumentMode, sarColonFrequencyBand, sarColonCenterWavelength, sarColonCenterFrequency, sarColonPolarization, sarColonBands, sarColonType, sarColonResolution, sarColonPixelSpacing, sarColonLooks);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectionSar {\n");
    
    sb.append("    sarColonPlatform: ").append(toIndentedString(sarColonPlatform)).append("\n");
    sb.append("    sarColonConstellation: ").append(toIndentedString(sarColonConstellation)).append("\n");
    sb.append("    sarColonInstrument: ").append(toIndentedString(sarColonInstrument)).append("\n");
    sb.append("    sarColonInstrumentMode: ").append(toIndentedString(sarColonInstrumentMode)).append("\n");
    sb.append("    sarColonFrequencyBand: ").append(toIndentedString(sarColonFrequencyBand)).append("\n");
    sb.append("    sarColonCenterWavelength: ").append(toIndentedString(sarColonCenterWavelength)).append("\n");
    sb.append("    sarColonCenterFrequency: ").append(toIndentedString(sarColonCenterFrequency)).append("\n");
    sb.append("    sarColonPolarization: ").append(toIndentedString(sarColonPolarization)).append("\n");
    sb.append("    sarColonBands: ").append(toIndentedString(sarColonBands)).append("\n");
    sb.append("    sarColonType: ").append(toIndentedString(sarColonType)).append("\n");
    sb.append("    sarColonResolution: ").append(toIndentedString(sarColonResolution)).append("\n");
    sb.append("    sarColonPixelSpacing: ").append(toIndentedString(sarColonPixelSpacing)).append("\n");
    sb.append("    sarColonLooks: ").append(toIndentedString(sarColonLooks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

