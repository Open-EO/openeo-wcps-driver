/*
 * openEO API
 * The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.   **Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:  * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.2/cors/index.html) to allow browser-based access to the API.  * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.2/errors/index.html)  * Unless otherwise stated the API works *case sensitive*.
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: openeo@list.tuwien.ac.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.openeo.model;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Describes a general argument for various entities.
 */
@ApiModel(description = "Describes a general argument for various entities.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-07-22T13:33:50.326+02:00[Europe/Rome]")
public class Argument  implements Serializable {
  /**
	 * 
	 */
	private static final long serialVersionUID = 1684023512492337064L;

@JsonProperty("description")
  private String description;

  @JsonProperty("required")
  private Boolean required = false;

  @JsonProperty("default")
  private Object _default = null;

  @JsonProperty("minimum")
  private BigDecimal minimum;

  @JsonProperty("maximum")
  private BigDecimal maximum;

  @JsonProperty("enum")
  private List<Object> _enum = null;

  @JsonProperty("example")
  private Object example = null;

  public Argument description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A brief description of the argument.
   * @return description
   **/
  @JsonProperty("description")
  @ApiModelProperty(required = true, value = "A brief description of the argument.")
  @NotNull 
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Argument required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Determines whether this argument is mandatory.
   * @return required
   **/
  @JsonProperty("required")
  @ApiModelProperty(value = "Determines whether this argument is mandatory.")
  
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }

  public Argument _default(Object _default) {
    this._default = _default;
    return this;
  }

  /**
   * The default value represents what would be assumed by the consumer of the input as the value of the argument if none is provided. The value MUST conform to the defined type for the argument defined at the same level. For example, if type is string, then default can be \&quot;foo\&quot; but cannot be 1.
   * @return _default
   **/
  @JsonProperty("default")
  @ApiModelProperty(value = "The default value represents what would be assumed by the consumer of the input as the value of the argument if none is provided. The value MUST conform to the defined type for the argument defined at the same level. For example, if type is string, then default can be \"foo\" but cannot be 1.")
  
  public Object getDefault() {
    return _default;
  }

  public void setDefault(Object _default) {
    this._default = _default;
  }

  public Argument minimum(BigDecimal minimum) {
    this.minimum = minimum;
    return this;
  }

  /**
   * Minimum value allowed for numeric arguments.
   * @return minimum
   **/
  @JsonProperty("minimum")
  @ApiModelProperty(value = "Minimum value allowed for numeric arguments.")
  @Valid 
  public BigDecimal getMinimum() {
    return minimum;
  }

  public void setMinimum(BigDecimal minimum) {
    this.minimum = minimum;
  }

  public Argument maximum(BigDecimal maximum) {
    this.maximum = maximum;
    return this;
  }

  /**
   * Maximum value allowed for numeric arguments.
   * @return maximum
   **/
  @JsonProperty("maximum")
  @ApiModelProperty(value = "Maximum value allowed for numeric arguments.")
  @Valid 
  public BigDecimal getMaximum() {
    return maximum;
  }

  public void setMaximum(BigDecimal maximum) {
    this.maximum = maximum;
  }

  public Argument _enum(List<Object> _enum) {
    this._enum = _enum;
    return this;
  }

  public Argument addEnumItem(Object _enumItem) {
    if (this._enum == null) {
      this._enum = new ArrayList<Object>();
    }
    this._enum.add(_enumItem);
    return this;
  }

  /**
   * List of allowed values for this argument. To represent examples that cannot be naturally represented in JSON, a string value can be used to contain the example with escaping where necessary.
   * @return _enum
   **/
  @JsonProperty("enum")
  @ApiModelProperty(value = "List of allowed values for this argument. To represent examples that cannot be naturally represented in JSON, a string value can be used to contain the example with escaping where necessary.")
  
  public List<Object> getEnum() {
    return _enum;
  }

  public void setEnum(List<Object> _enum) {
    this._enum = _enum;
  }

  public Argument example(Object example) {
    this.example = example;
    return this;
  }

  /**
   * A free-form property to include an example for this argument. To represent examples that cannot be naturally represented in JSON, a string value can be used to contain the example with escaping where necessary.
   * @return example
   **/
  @JsonProperty("example")
  @ApiModelProperty(value = "A free-form property to include an example for this argument. To represent examples that cannot be naturally represented in JSON, a string value can be used to contain the example with escaping where necessary.")
  
  public Object getExample() {
    return example;
  }

  public void setExample(Object example) {
    this.example = example;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Argument argument = (Argument) o;
    return Objects.equals(this.description, argument.description) &&
        Objects.equals(this.required, argument.required) &&
        Objects.equals(this._default, argument._default) &&
        Objects.equals(this.minimum, argument.minimum) &&
        Objects.equals(this.maximum, argument.maximum) &&
        Objects.equals(this._enum, argument._enum) &&
        Objects.equals(this.example, argument.example);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, required, _default, minimum, maximum, _enum, example);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Argument {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    _enum: ").append(toIndentedString(_enum)).append("\n");
    sb.append("    example: ").append(toIndentedString(example)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

