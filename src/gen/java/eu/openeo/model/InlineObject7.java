/*
 * openEO API
 * The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.   **Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:  * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.0/cors/index.html) to allow browser-based access to the API.  * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.0/errors/index.html)  * Unless otherwise stated the API works *case sensitive*.
 *
 * OpenAPI spec version: 0.4.0
 * Contact: openeo@list.tuwien.ac.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.openeo.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import eu.openeo.model.ProcessNode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * InlineObject7
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-02-12T13:52:55.621+01:00[Europe/Rome]")
public class InlineObject7  implements Serializable {
  @JsonProperty("title")
  private String title;

  @JsonProperty("description")
  private String description;

  @JsonProperty("process_graph")
  private Map<String, ProcessNode> processGraph = null;

  @JsonProperty("plan")
  private String plan;

  @JsonProperty("budget")
  private BigDecimal budget;

  public InlineObject7 title(String title) {
    this.title = title;
    return this;
  }

  /**
   * A short description to easily distinguish entities.
   * @return title
   **/
  @JsonProperty("title")
  @ApiModelProperty(example = "NDVI based on Sentinel 2", value = "A short description to easily distinguish entities.")
  
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public InlineObject7 description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Detailed description to fully explain the entity.  [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation.
   * @return description
   **/
  @JsonProperty("description")
  @ApiModelProperty(example = "Deriving minimum NDVI measurements over pixel time series of Sentinel 2", value = "Detailed description to fully explain the entity.  [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation.")
  
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public InlineObject7 processGraph(Map<String, ProcessNode> processGraph) {
    this.processGraph = processGraph;
    return this;
  }

  public InlineObject7 putProcessGraphItem(String key, ProcessNode processGraphItem) {
    if (this.processGraph == null) {
      this.processGraph = new HashMap<String, ProcessNode>();
    }
    this.processGraph.put(key, processGraphItem);
    return this;
  }

  /**
   * A process graph defines a graph-like structure as a connected set of executable processes. Each key is a unique identifier (node id) that is used to refer to the process in the graph.
   * @return processGraph
   **/
  @JsonProperty("process_graph")
  @ApiModelProperty(example = "{\"export1\":{\"process_id\":\"export\",\"arguments\":{\"data\":{\"from_node\":\"mergec1\"},\"format\":\"png\"}},\"export2\":{\"process_id\":\"export\",\"arguments\":{\"data\":{\"from_node\":\"reduce2\"},\"format\":\"png\"},\"result\":true},\"filter1\":{\"process_id\":\"filter_temporal\",\"arguments\":{\"data\":{\"from_node\":\"getcol1\"},\"from\":\"2017-01-01\",\"to\":\"2017-01-31\"}},\"filter2\":{\"process_id\":\"filter_temporal\",\"arguments\":{\"data\":{\"from_node\":\"getcol1\"},\"from\":\"2018-01-01\",\"to\":\"2018-01-31\"}},\"filter3\":{\"process_id\":\"filter_bands\",\"arguments\":{\"bands\":[\"nir\",\"red\"],\"data\":{\"from_node\":\"reduce1\"}}},\"getcol1\":{\"process_id\":\"get_collection\",\"arguments\":{\"name\":\"Sentinel-1\"}},\"mergec1\":{\"process_id\":\"merge_collections\",\"arguments\":{\"data1\":{\"from_node\":\"filter1\"},\"data2\":{\"from_node\":\"filter2\"}}},\"reduce1\":{\"process_id\":\"reduce\",\"arguments\":{\"data\":{\"from_node\":\"mergec1\"},\"dimension\":\"temporal\",\"reducer\":{\"callback\":{\"min1\":{\"process_id\":\"min\",\"arguments\":{\"data\":{\"from_argument\":\"dimension_data\"},\"dimension\":{\"from_argument\":\"dimension\"}},\"result\":true}}}}},\"reduce2\":{\"process_id\":\"reduce\",\"arguments\":{\"data\":{\"from_node\":\"filter3\"},\"dimension\":\"spectral\",\"reducer\":{\"callback\":{\"divide1\":{\"process_id\":\"divide\",\"arguments\":{\"x\":{\"from_node\":\"substr1\"},\"y\":{\"from_node\":\"sum1\"}},\"result\":true},\"output1\":{\"process_id\":\"output\",\"arguments\":{\"data\":{\"from_node\":\"divide1\"}}},\"substr1\":{\"process_id\":\"substract\",\"arguments\":{\"data\":{\"from_argument\":\"dimension_data\"}}},\"sum1\":{\"process_id\":\"sum\",\"arguments\":{\"data\":{\"from_argument\":\"dimension_data\"}}}}}}}}", value = "A process graph defines a graph-like structure as a connected set of executable processes. Each key is a unique identifier (node id) that is used to refer to the process in the graph.")
  @Valid
  public Map<String, ProcessNode> getProcessGraph() {
    return processGraph;
  }

  public void setProcessGraph(Map<String, ProcessNode> processGraph) {
    this.processGraph = processGraph;
  }

  public InlineObject7 plan(String plan) {
    this.plan = plan;
    return this;
  }

  /**
   * The billing plan to process and charge the job with.  The plans and the default plan can be retrieved by calling &#x60;GET /&#x60;.  Billing plans MUST be accepted *case insensitive*. Billing plans not on the list of available plans MUST be rejected with openEO error &#x60;BillingPlanInvalid&#x60;.  If no billing plan is specified by the client, the server MUST default to the default billing plan in &#x60;GET /&#x60;. If the default billing plan of the provider changes, the job or service MUST not be affected by the change, i.e. the default plan which is valid during job or service creation must be permanently assigned to the job or service until the client requests to change it.
   * @return plan
   **/
  @JsonProperty("plan")
  @ApiModelProperty(example = "free", value = "The billing plan to process and charge the job with.  The plans and the default plan can be retrieved by calling `GET /`.  Billing plans MUST be accepted *case insensitive*. Billing plans not on the list of available plans MUST be rejected with openEO error `BillingPlanInvalid`.  If no billing plan is specified by the client, the server MUST default to the default billing plan in `GET /`. If the default billing plan of the provider changes, the job or service MUST not be affected by the change, i.e. the default plan which is valid during job or service creation must be permanently assigned to the job or service until the client requests to change it.")
  
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }

  public InlineObject7 budget(BigDecimal budget) {
    this.budget = budget;
    return this;
  }

  /**
   * Maximum amount of costs the user is allowed to produce. The value MUST be specified in the currency the back-end is working with. The currency can be retrieved by calling &#x60;GET /&#x60;. If possible, back-ends SHOULD reject jobs with openEO error &#x60;PaymentRequired&#x60; if the budget is too low to process the request completely. Otherwise, when reaching the budget jobs MAY try to return partial results if possible. Otherwise the request and results are discarded. Users SHOULD be warned by clients that reaching the budget MAY discard the results and that setting this value should be well-wrought. Setting the buget to &#x60;null&#x60; means there is no specified budget.
   * @return budget
   **/
  @JsonProperty("budget")
  @ApiModelProperty(example = "100", value = "Maximum amount of costs the user is allowed to produce. The value MUST be specified in the currency the back-end is working with. The currency can be retrieved by calling `GET /`. If possible, back-ends SHOULD reject jobs with openEO error `PaymentRequired` if the budget is too low to process the request completely. Otherwise, when reaching the budget jobs MAY try to return partial results if possible. Otherwise the request and results are discarded. Users SHOULD be warned by clients that reaching the budget MAY discard the results and that setting this value should be well-wrought. Setting the buget to `null` means there is no specified budget.")
  @Valid
  public BigDecimal getBudget() {
    return budget;
  }

  public void setBudget(BigDecimal budget) {
    this.budget = budget;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject7 inlineObject7 = (InlineObject7) o;
    return Objects.equals(this.title, inlineObject7.title) &&
        Objects.equals(this.description, inlineObject7.description) &&
        Objects.equals(this.processGraph, inlineObject7.processGraph) &&
        Objects.equals(this.plan, inlineObject7.plan) &&
        Objects.equals(this.budget, inlineObject7.budget);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, processGraph, plan, budget);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject7 {\n");
    
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    processGraph: ").append(toIndentedString(processGraph)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    budget: ").append(toIndentedString(budget)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

