/*
 * openEO API
 * The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.   **Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:  * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.2/cors/index.html) to allow browser-based access to the API.  * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.2/errors/index.html)  * Unless otherwise stated the API works *case sensitive*.
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: openeo@list.tuwien.ac.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.openeo.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import eu.openeo.model.Link;
import eu.openeo.model.UserStorage;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Holds user information. If no budget or storage limit applies to the user account the corresponding properties MUST be set to null.
 */
@ApiModel(description = "Holds user information. If no budget or storage limit applies to the user account the corresponding properties MUST be set to null.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-07-22T13:33:50.326+02:00[Europe/Rome]")
public class UserDataResponse  implements Serializable {
  @JsonProperty("user_id")
  private String userId;

  @JsonProperty("storage")
  private UserStorage storage = null;

  @JsonProperty("budget")
  private BigDecimal budget;

  @JsonProperty("links")
  private List<Link> links = null;

  public UserDataResponse userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Unique identifier of the user. MUST match the specified pattern. SHOULD be a human-friendly user name instead of a randomly generated identifier.
   * @return userId
   **/
  @JsonProperty("user_id")
  @ApiModelProperty(example = "john_doe", required = true, value = "Unique identifier of the user. MUST match the specified pattern. SHOULD be a human-friendly user name instead of a randomly generated identifier.")
  @NotNull  @Pattern(regexp="^[A-Za-z0-9_\\-\\.~]+$")
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }

  public UserDataResponse storage(UserStorage storage) {
    this.storage = storage;
    return this;
  }

  /**
   * Get storage
   * @return storage
   **/
  @JsonProperty("storage")
  @ApiModelProperty(value = "")
  @Valid 
  public UserStorage getStorage() {
    return storage;
  }

  public void setStorage(UserStorage storage) {
    this.storage = storage;
  }

  public UserDataResponse budget(BigDecimal budget) {
    this.budget = budget;
    return this;
  }

  /**
   * Maximum amount of costs the user is allowed to produce. The value MUST be specified in the currency the back-end is working with. The currency can be retrieved by calling &#x60;GET /&#x60;. If possible, back-ends SHOULD reject jobs with openEO error &#x60;PaymentRequired&#x60; if the budget is too low to process the request completely. Otherwise, when reaching the budget jobs MAY try to return partial results if possible. Otherwise the request and results are discarded. Users SHOULD be warned by clients that reaching the budget MAY discard the results and that setting this value should be well-wrought. Setting the buget to &#x60;null&#x60; means there is no specified budget.
   * @return budget
   **/
  @JsonProperty("budget")
  @ApiModelProperty(example = "100", value = "Maximum amount of costs the user is allowed to produce. The value MUST be specified in the currency the back-end is working with. The currency can be retrieved by calling `GET /`. If possible, back-ends SHOULD reject jobs with openEO error `PaymentRequired` if the budget is too low to process the request completely. Otherwise, when reaching the budget jobs MAY try to return partial results if possible. Otherwise the request and results are discarded. Users SHOULD be warned by clients that reaching the budget MAY discard the results and that setting this value should be well-wrought. Setting the buget to `null` means there is no specified budget.")
  @Valid 
  public BigDecimal getBudget() {
    return budget;
  }

  public void setBudget(BigDecimal budget) {
    this.budget = budget;
  }

  public UserDataResponse links(List<Link> links) {
    this.links = links;
    return this;
  }

  public UserDataResponse addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<Link>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Additional links related to the user, e.g. where payments are handled or the user profile could be changed.
   * @return links
   **/
  @JsonProperty("links")
  @ApiModelProperty(example = "[{\"href\":\"http://www.openeo.org/john_doe/payment/\",\"rel\":\"payment\"},{\"href\":\"http://www.openeo.org/john_doe/edit/\",\"rel\":\"edit\"},{\"href\":\"http://www.openeo.org/john_doe/\",\"rel\":\"about\",\"type\":\"text/html\",\"title\":\"User profile\"},{\"href\":\"http://www.openeo.org/john_doe.vcf\",\"rel\":\"about\",\"type\":\"text/vcard\",\"title\":\"vCard of the user\"}]", value = "Additional links related to the user, e.g. where payments are handled or the user profile could be changed.")
  @Valid 
  public List<Link> getLinks() {
    return links;
  }

  public void setLinks(List<Link> links) {
    this.links = links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserDataResponse userDataResponse = (UserDataResponse) o;
    return Objects.equals(this.userId, userDataResponse.userId) &&
        Objects.equals(this.storage, userDataResponse.storage) &&
        Objects.equals(this.budget, userDataResponse.budget) &&
        Objects.equals(this.links, userDataResponse.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, storage, budget, links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserDataResponse {\n");
    
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    budget: ").append(toIndentedString(budget)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

