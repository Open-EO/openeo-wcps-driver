/*
 * openEO API
 * The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.   **Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:  * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.0/cors/index.html) to allow browser-based access to the API.  * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.0/errors/index.html)  * Unless otherwise stated the API works *case sensitive*.
 *
 * OpenAPI spec version: 0.4.0
 * Contact: openeo@list.tuwien.ac.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.openeo.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import eu.openeo.model.CollectionExtent;
import eu.openeo.model.Link;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * InlineResponse2002Collections
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-02-12T13:52:55.621+01:00[Europe/Rome]")
public class InlineResponse2002Collections  implements Serializable {
  @JsonProperty("stac_version")
  private String stacVersion;

  @JsonProperty("id")
  private String id;

  @JsonProperty("title")
  private String title;

  @JsonProperty("description")
  private String description;

  @JsonProperty("keywords")
  private List<String> keywords = null;

  @JsonProperty("version")
  private String version;

  @JsonProperty("license")
  private String license;

  @JsonProperty("providers")
  private List<Object> providers = null;

  @JsonProperty("extent")
  private CollectionExtent extent = null;

  @JsonProperty("links")
  private List<Link> links = new ArrayList<Link>();

  public InlineResponse2002Collections stacVersion(String stacVersion) {
    this.stacVersion = stacVersion;
    return this;
  }

  /**
   * The STAC version the collection implements.
   * @return stacVersion
   **/
  @JsonProperty("stac_version")
  @ApiModelProperty(example = "0.6.2", required = true, value = "The STAC version the collection implements.")
    @NotNull

  public String getStacVersion() {
    return stacVersion;
  }

  public void setStacVersion(String stacVersion) {
    this.stacVersion = stacVersion;
  }

  public InlineResponse2002Collections id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Identifier for the collection that is unique across the provider.  MUST match the specified pattern.
   * @return id
   **/
  @JsonProperty("id")
  @ApiModelProperty(example = "Sentinel-2A", required = true, value = "Identifier for the collection that is unique across the provider.  MUST match the specified pattern.")
    @NotNull
 @Pattern(regexp="^[A-Za-z0-9_\\-\\.~/]+$")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public InlineResponse2002Collections title(String title) {
    this.title = title;
    return this;
  }

  /**
   * A short descriptive one-line title for the collection.
   * @return title
   **/
  @JsonProperty("title")
  @ApiModelProperty(value = "A short descriptive one-line title for the collection.")
  
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public InlineResponse2002Collections description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Detailed multi-line description to fully explain the collection.  [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation.
   * @return description
   **/
  @JsonProperty("description")
  @ApiModelProperty(required = true, value = "Detailed multi-line description to fully explain the collection.  [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation.")
    @NotNull

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public InlineResponse2002Collections keywords(List<String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public InlineResponse2002Collections addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<String>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

  /**
   * List of keywords describing the collection.
   * @return keywords
   **/
  @JsonProperty("keywords")
  @ApiModelProperty(value = "List of keywords describing the collection.")
  
  public List<String> getKeywords() {
    return keywords;
  }

  public void setKeywords(List<String> keywords) {
    this.keywords = keywords;
  }

  public InlineResponse2002Collections version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Version of the collection.
   * @return version
   **/
  @JsonProperty("version")
  @ApiModelProperty(value = "Version of the collection.")
  
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public InlineResponse2002Collections license(String license) {
    this.license = license;
    return this;
  }

  /**
   * Collection&#39;s license(s) as a SPDX [License identifier](https://spdx.org/licenses/) or  [expression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60), or &#x60;proprietary&#x60; if the license is not on the SPDX license list. Proprietary licensed data SHOULD add a link to the license text with the &#x60;license&#x60; relation in the links section. The license text MUST NOT be provided as a value of this field. If there is no public license URL available, it is RECOMMENDED to host the license text independently and link to it.
   * @return license
   **/
  @JsonProperty("license")
  @ApiModelProperty(example = "Apache-2.0", required = true, value = "Collection's license(s) as a SPDX [License identifier](https://spdx.org/licenses/) or  [expression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60), or `proprietary` if the license is not on the SPDX license list. Proprietary licensed data SHOULD add a link to the license text with the `license` relation in the links section. The license text MUST NOT be provided as a value of this field. If there is no public license URL available, it is RECOMMENDED to host the license text independently and link to it.")
    @NotNull

  public String getLicense() {
    return license;
  }

  public void setLicense(String license) {
    this.license = license;
  }

  public InlineResponse2002Collections providers(List<Object> providers) {
    this.providers = providers;
    return this;
  }

  public InlineResponse2002Collections addProvidersItem(Object providersItem) {
    if (this.providers == null) {
      this.providers = new ArrayList<Object>();
    }
    this.providers.add(providersItem);
    return this;
  }

  /**
   * A list of providers, which may include all organizations capturing or processing the data or the hosting provider. Providers should be listed in chronological order with the most recent provider being the last element of the list.
   * @return providers
   **/
  @JsonProperty("providers")
  @ApiModelProperty(value = "A list of providers, which may include all organizations capturing or processing the data or the hosting provider. Providers should be listed in chronological order with the most recent provider being the last element of the list.")
  
  public List<Object> getProviders() {
    return providers;
  }

  public void setProviders(List<Object> providers) {
    this.providers = providers;
  }

  public InlineResponse2002Collections extent(CollectionExtent extent) {
    this.extent = extent;
    return this;
  }

  /**
   * Get extent
   * @return extent
   **/
  @JsonProperty("extent")
  @ApiModelProperty(required = true, value = "")
    @NotNull
@Valid
  public CollectionExtent getExtent() {
    return extent;
  }

  public void setExtent(CollectionExtent extent) {
    this.extent = extent;
  }

  public InlineResponse2002Collections links(List<Link> links) {
    this.links = links;
    return this;
  }

  public InlineResponse2002Collections addLinksItem(Link linksItem) {
    this.links.add(linksItem);
    return this;
  }

  /**
   * Additional links related to this collection. Could reference to other meta data formats with additional information or a preview image.
   * @return links
   **/
  @JsonProperty("links")
  @ApiModelProperty(required = true, value = "Additional links related to this collection. Could reference to other meta data formats with additional information or a preview image.")
    @NotNull
@Valid
  public List<Link> getLinks() {
    return links;
  }

  public void setLinks(List<Link> links) {
    this.links = links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2002Collections inlineResponse2002Collections = (InlineResponse2002Collections) o;
    return Objects.equals(this.stacVersion, inlineResponse2002Collections.stacVersion) &&
        Objects.equals(this.id, inlineResponse2002Collections.id) &&
        Objects.equals(this.title, inlineResponse2002Collections.title) &&
        Objects.equals(this.description, inlineResponse2002Collections.description) &&
        Objects.equals(this.keywords, inlineResponse2002Collections.keywords) &&
        Objects.equals(this.version, inlineResponse2002Collections.version) &&
        Objects.equals(this.license, inlineResponse2002Collections.license) &&
        Objects.equals(this.providers, inlineResponse2002Collections.providers) &&
        Objects.equals(this.extent, inlineResponse2002Collections.extent) &&
        Objects.equals(this.links, inlineResponse2002Collections.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stacVersion, id, title, description, keywords, version, license, providers, extent, links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2002Collections {\n");
    
    sb.append("    stacVersion: ").append(toIndentedString(stacVersion)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    providers: ").append(toIndentedString(providers)).append("\n");
    sb.append("    extent: ").append(toIndentedString(extent)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

