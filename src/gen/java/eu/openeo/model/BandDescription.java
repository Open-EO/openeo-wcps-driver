/*
 * OpenEO API
 * The OpenEO API specification for interoperable cloud-based processing of large Earth observation datasets. **This early draft version is incomplete and intended for working on a prototype and a proof of concept.** Things that are currently missing particularly include:   * Authentication and authorization with OAuth 2.0,   * how results of computations can be downloaded,   * how data is streamed into UDFs and how the output of UDFs is returned,   * how services are organized as microservices,   * how payments can be handled,  * how resources (e.g. process graphs) can be shared,  * and how OpenSearch is interfaced
 *
 * OpenAPI spec version: 0.0.2
 * Contact: marius.appel@uni-muenster.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package eu.openeo.model;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.validation.constraints.NotNull;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.annotations.ApiModelProperty;

/**
 * BandDescription
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2018-02-26T14:26:50.688+01:00")
public class BandDescription implements Serializable {
	@JsonProperty("band_id")
	private String bandId = null;

	@JsonProperty("name")
	private String name = null;

	@JsonProperty("type")
	private BandDatatype type = null;

	@JsonProperty("offset")
	private BigDecimal offset = null;

	@JsonProperty("scale")
	private BigDecimal scale = null;

	@JsonProperty("unit")
	private String unit = null;

	@JsonProperty("nodata")
	private List<BigDecimal> nodata = null;

	public BandDescription bandId(String bandId) {
		this.bandId = bandId;
		return this;
	}

	/**
	 * unique identifier for bands
	 * 
	 * @return bandId
	 **/
	@JsonProperty("band_id")
	@ApiModelProperty(required = true, value = "unique identifier for bands")
	@NotNull
	public String getBandId() {
		return bandId;
	}

	public void setBandId(String bandId) {
		this.bandId = bandId;
	}

	public BandDescription name(String name) {
		this.name = name;
		return this;
	}

	/**
	 * optional name to refer to bands by name such as &#39;red&#39; instead of
	 * their band_id.
	 * 
	 * @return name
	 **/
	@JsonProperty("name")
	@ApiModelProperty(value = "optional name to refer to bands by name such as 'red' instead of their band_id.")
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public BandDescription type(BandDatatype type) {
		this.type = type;
		return this;
	}

	/**
	 * Get type
	 * 
	 * @return type
	 **/
	@JsonProperty("type")
	@ApiModelProperty(value = "")
	public BandDatatype getType() {
		return type;
	}

	public void setType(BandDatatype type) {
		this.type = type;
	}

	public BandDescription offset(BigDecimal offset) {
		this.offset = offset;
		return this;
	}

	/**
	 * offset to convert band values to the actual measurement scale.
	 * 
	 * @return offset
	 **/
	@JsonProperty("offset")
	@ApiModelProperty(value = "offset to convert band values to the actual measurement scale.")
	public BigDecimal getOffset() {
		return offset;
	}

	public void setOffset(BigDecimal offset) {
		this.offset = offset;
	}

	public BandDescription scale(BigDecimal scale) {
		this.scale = scale;
		return this;
	}

	/**
	 * scale to convert band values to the actual measurement scale.
	 * 
	 * @return scale
	 **/
	@JsonProperty("scale")
	@ApiModelProperty(value = "scale to convert band values to the actual measurement scale.")
	public BigDecimal getScale() {
		return scale;
	}

	public void setScale(BigDecimal scale) {
		this.scale = scale;
	}

	public BandDescription unit(String unit) {
		this.unit = unit;
		return this;
	}

	/**
	 * unit of measurements (preferably SI)
	 * 
	 * @return unit
	 **/
	@JsonProperty("unit")
	@ApiModelProperty(value = "unit of measurements (preferably SI)")
	public String getUnit() {
		return unit;
	}

	public void setUnit(String unit) {
		this.unit = unit;
	}

	public BandDescription nodata(List<BigDecimal> nodata) {
		this.nodata = nodata;
		return this;
	}

	public BandDescription addNodataItem(BigDecimal nodataItem) {
		if (this.nodata == null) {
			this.nodata = new ArrayList<BigDecimal>();
		}
		this.nodata.add(nodataItem);
		return this;
	}

	/**
	 * specific values representing no data
	 * 
	 * @return nodata
	 **/
	@JsonProperty("nodata")
	@ApiModelProperty(value = "specific values representing no data")
	public List<BigDecimal> getNodata() {
		return nodata;
	}

	public void setNodata(List<BigDecimal> nodata) {
		this.nodata = nodata;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		BandDescription bandDescription = (BandDescription) o;
		return Objects.equals(this.bandId, bandDescription.bandId) && Objects.equals(this.name, bandDescription.name)
				&& Objects.equals(this.type, bandDescription.type)
				&& Objects.equals(this.offset, bandDescription.offset)
				&& Objects.equals(this.scale, bandDescription.scale) && Objects.equals(this.unit, bandDescription.unit)
				&& Objects.equals(this.nodata, bandDescription.nodata);
	}

	@Override
	public int hashCode() {
		return Objects.hash(bandId, name, type, offset, scale, unit, nodata);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class BandDescription {\n");

		sb.append("    bandId: ").append(toIndentedString(bandId)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    type: ").append(toIndentedString(type)).append("\n");
		sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
		sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
		sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
		sb.append("    nodata: ").append(toIndentedString(nodata)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}
}
