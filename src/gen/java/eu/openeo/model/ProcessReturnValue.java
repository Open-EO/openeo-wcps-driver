/*
 * openEO API
 * The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.   **Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:  * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.2/cors/index.html) to allow browser-based access to the API.  * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.2/errors/index.html)  * Unless otherwise stated the API works *case sensitive*.
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: openeo@list.tuwien.ac.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.openeo.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The data that is returned from this process.
 */
@ApiModel(description = "The data that is returned from this process.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-07-22T13:33:50.326+02:00[Europe/Rome]")
public class ProcessReturnValue  implements Serializable {
  @JsonProperty("description")
  private String description;

  @JsonProperty("media_type")
  private String mediaType = "application/json";

  @JsonProperty("schema")
  private Object schema = null;

  public ProcessReturnValue description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Detailed description to fully explain the entity.  [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation. In addition to the CommonMark syntax, clients can convert process IDs that are formatted as in the following example into links instead of code blocks: &#x60;&#x60;&#x60; &#x60;&#x60;process_id()&#x60;&#x60; &#x60;&#x60;&#x60;
   * @return description
   **/
  @JsonProperty("description")
  @ApiModelProperty(required = true, value = "Detailed description to fully explain the entity.  [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation. In addition to the CommonMark syntax, clients can convert process IDs that are formatted as in the following example into links instead of code blocks: ``` ``process_id()`` ```")
  @NotNull 
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ProcessReturnValue mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * The media (MIME) type that the value is encoded in.
   * @return mediaType
   **/
  @JsonProperty("media_type")
  @ApiModelProperty(value = "The media (MIME) type that the value is encoded in.")
  
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }

  public ProcessReturnValue schema(Object schema) {
    this.schema = schema;
    return this;
  }

  /**
   * A schema object according to the specification of [JSON Schema draft-07](http://json-schema.org/). Additional values for &#x60;format&#x60; are defined [centrally in the API documentation](https://open-eo.github.io/openeo-api/v/0.4.2/processes/index.html), e.g. bbox or crs. Callback parameters are defined with the custom schema keyword &#x60;parameters&#x60;.
   * @return schema
   **/
  @JsonProperty("schema")
  @ApiModelProperty(required = true, value = "A schema object according to the specification of [JSON Schema draft-07](http://json-schema.org/). Additional values for `format` are defined [centrally in the API documentation](https://open-eo.github.io/openeo-api/v/0.4.2/processes/index.html), e.g. bbox or crs. Callback parameters are defined with the custom schema keyword `parameters`.")
  @NotNull @Valid 
  public Object getSchema() {
    return schema;
  }

  public void setSchema(Object schema) {
    this.schema = schema;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessReturnValue processReturnValue = (ProcessReturnValue) o;
    return Objects.equals(this.description, processReturnValue.description) &&
        Objects.equals(this.mediaType, processReturnValue.mediaType) &&
        Objects.equals(this.schema, processReturnValue.schema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, mediaType, schema);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessReturnValue {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

