/*
 * openEO API
 * The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.   **Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:  * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.0/cors/index.html) to allow browser-based access to the API.  * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.0/errors/index.html)  * Unless otherwise stated the API works *case sensitive*.
 *
 * OpenAPI spec version: 0.4.0
 * Contact: openeo@list.tuwien.ac.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.openeo.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * ProcessExceptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-02-12T13:52:55.621+01:00[Europe/Rome]")
public class ProcessExceptions  implements Serializable {
  @JsonProperty("description")
  private String description;

  @JsonProperty("message")
  private String message;

  @JsonProperty("http")
  private Integer http = 400;

  public ProcessExceptions description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Detailed description to fully explain the error to client users and back-end developers. This should not be shown in the clients directly, but may be linked to in the errors &#x60;url&#x60; property.    [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation.
   * @return description
   **/
  @JsonProperty("description")
  @ApiModelProperty(value = "Detailed description to fully explain the error to client users and back-end developers. This should not be shown in the clients directly, but may be linked to in the errors `url` property.    [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation.")
  
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ProcessExceptions message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Explains the reason the server is rejecting the request. This message is intended to be displayed to the client user. For \&quot;4xx\&quot; error codes the message should explain shortly how the client needs to modify the request.  The message MAY contain variables, which are enclosed by curly brackets. Example: &#x60;{variable_name}&#x60;
   * @return message
   **/
  @JsonProperty("message")
  @ApiModelProperty(example = "The value specified for the process argument '{argument}' in process '{process}' is invalid: {reason}", required = true, value = "Explains the reason the server is rejecting the request. This message is intended to be displayed to the client user. For \"4xx\" error codes the message should explain shortly how the client needs to modify the request.  The message MAY contain variables, which are enclosed by curly brackets. Example: `{variable_name}`")
    @NotNull

  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public ProcessExceptions http(Integer http) {
    this.http = http;
    return this;
  }

  /**
   * HTTP Status Code, following the [error handling conventions in openEO](https://open-eo.github.io/openeo-api/v/0.4.0/errors/). Defaults to &#x60;400&#x60;.
   * @return http
   **/
  @JsonProperty("http")
  @ApiModelProperty(value = "HTTP Status Code, following the [error handling conventions in openEO](https://open-eo.github.io/openeo-api/v/0.4.0/errors/). Defaults to `400`.")
  
  public Integer getHttp() {
    return http;
  }

  public void setHttp(Integer http) {
    this.http = http;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessExceptions processExceptions = (ProcessExceptions) o;
    return Objects.equals(this.description, processExceptions.description) &&
        Objects.equals(this.message, processExceptions.message) &&
        Objects.equals(this.http, processExceptions.http);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, message, http);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessExceptions {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    http: ").append(toIndentedString(http)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

