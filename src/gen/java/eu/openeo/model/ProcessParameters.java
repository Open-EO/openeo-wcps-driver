/*
 * openEO API
 * The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.   **Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:  * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.0/cors/index.html) to allow browser-based access to the API.  * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.0/errors/index.html)  * Unless otherwise stated the API works *case sensitive*.
 *
 * OpenAPI spec version: 0.4.0
 * Contact: openeo@list.tuwien.ac.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.openeo.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import eu.openeo.model.JsonSchema;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * ProcessParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-02-12T13:52:55.621+01:00[Europe/Rome]")
public class ProcessParameters  implements Serializable {
  @JsonProperty("description")
  private String description;

  @JsonProperty("required")
  private Boolean required = false;

  @JsonProperty("deprecated")
  private Boolean deprecated = false;

  @JsonProperty("experimental")
  private Boolean experimental = false;

  @JsonProperty("media_type")
  private String mediaType = "application/json";

  @JsonProperty("schema")
  private JsonSchema schema = null;

  public ProcessParameters description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Detailed description to fully explain the entity.  [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation. In addition to the CommonMark syntax, clients can convert process IDs that are formatted as in the following example into links instead of code blocks: &#x60;&#x60;&#x60; &#x60;&#x60;process_id()&#x60;&#x60; &#x60;&#x60;&#x60;
   * @return description
   **/
  @JsonProperty("description")
  @ApiModelProperty(required = true, value = "Detailed description to fully explain the entity.  [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation. In addition to the CommonMark syntax, clients can convert process IDs that are formatted as in the following example into links instead of code blocks: ``` ``process_id()`` ```")
    @NotNull

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ProcessParameters required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Determines whether this parameter is mandatory.
   * @return required
   **/
  @JsonProperty("required")
  @ApiModelProperty(value = "Determines whether this parameter is mandatory.")
  
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }

  public ProcessParameters deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

  /**
   * Specifies that a parameter is deprecated and SHOULD be transitioned out of usage.
   * @return deprecated
   **/
  @JsonProperty("deprecated")
  @ApiModelProperty(value = "Specifies that a parameter is deprecated and SHOULD be transitioned out of usage.")
  
  public Boolean getDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }

  public ProcessParameters experimental(Boolean experimental) {
    this.experimental = experimental;
    return this;
  }

  /**
   * Specifies that a parameter is experimental and likely to change or produce unpredictable behaviour.
   * @return experimental
   **/
  @JsonProperty("experimental")
  @ApiModelProperty(value = "Specifies that a parameter is experimental and likely to change or produce unpredictable behaviour.")
  
  public Boolean getExperimental() {
    return experimental;
  }

  public void setExperimental(Boolean experimental) {
    this.experimental = experimental;
  }

  public ProcessParameters mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * The media (MIME) type that the value is encoded in.
   * @return mediaType
   **/
  @JsonProperty("media_type")
  @ApiModelProperty(value = "The media (MIME) type that the value is encoded in.")
  
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }

  public ProcessParameters schema(JsonSchema schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   **/
  @JsonProperty("schema")
  @ApiModelProperty(required = true, value = "")
    @NotNull
@Valid
  public JsonSchema getSchema() {
    return schema;
  }

  public void setSchema(JsonSchema schema) {
    this.schema = schema;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessParameters processParameters = (ProcessParameters) o;
    return Objects.equals(this.description, processParameters.description) &&
        Objects.equals(this.required, processParameters.required) &&
        Objects.equals(this.deprecated, processParameters.deprecated) &&
        Objects.equals(this.experimental, processParameters.experimental) &&
        Objects.equals(this.mediaType, processParameters.mediaType) &&
        Objects.equals(this.schema, processParameters.schema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, required, deprecated, experimental, mediaType, schema);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessParameters {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    experimental: ").append(toIndentedString(experimental)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

