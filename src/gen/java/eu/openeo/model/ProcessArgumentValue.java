/*
 * openEO API
 * The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.   **Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:  * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.2/cors/index.html) to allow browser-based access to the API.  * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.2/errors/index.html)  * Unless otherwise stated the API works *case sensitive*.
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: openeo@list.tuwien.ac.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.openeo.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import eu.openeo.model.AnyOfobjectstringnumberarraybooleanmap;
import eu.openeo.model.Callback;
import eu.openeo.model.CallbackParameter;
import eu.openeo.model.ProcessNode;
import eu.openeo.model.Result;
import eu.openeo.model.Variable;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Arguments for a process. See the API documentation for more information.
 */
@ApiModel(description = "Arguments for a process. See the API documentation for more information.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-07-22T13:33:50.326+02:00[Europe/Rome]")
public class ProcessArgumentValue  implements Serializable {
  @JsonProperty("variable_id")
  private String variableId;

  /**
   * The value for type is the expected data type for the content of the variable. &#x60;null&#x60; is allowed for all types.
   */
  public enum TypeEnum {
    STRING("string"),
    
    NUMBER("number"),
    
    INTEGER("integer"),
    
    BOOLEAN("boolean"),
    
    ARRAY("array"),
    
    OBJECT("object");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("type")
  private TypeEnum type = TypeEnum.STRING;

  @JsonProperty("description")
  private String description;

  @JsonProperty("default")
  private AnyOfobjectstringnumberarraybooleanmap _default = null;

  @JsonProperty("from_node")
  private String fromNode;

  @JsonProperty("from_argument")
  private String fromArgument;

  @JsonProperty("callback")
  private Map<String, ProcessNode> callback = new HashMap<String, ProcessNode>();

  public ProcessArgumentValue variableId(String variableId) {
    this.variableId = variableId;
    return this;
  }

  /**
   * The name of the variable. Can be any valid JSON key, but it is RECOMMENDED to use snake case and limit the characters to &#x60;a-z&#x60;, &#x60;0-9&#x60; and &#x60;_&#x60;.
   * @return variableId
   **/
  @JsonProperty("variable_id")
  @ApiModelProperty(required = true, value = "The name of the variable. Can be any valid JSON key, but it is RECOMMENDED to use snake case and limit the characters to `a-z`, `0-9` and `_`.")
  @NotNull 
  public String getVariableId() {
    return variableId;
  }

  public void setVariableId(String variableId) {
    this.variableId = variableId;
  }

  public ProcessArgumentValue type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The value for type is the expected data type for the content of the variable. &#x60;null&#x60; is allowed for all types.
   * @return type
   **/
  @JsonProperty("type")
  @ApiModelProperty(value = "The value for type is the expected data type for the content of the variable. `null` is allowed for all types.")
  
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ProcessArgumentValue description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional description about the variable.
   * @return description
   **/
  @JsonProperty("description")
  @ApiModelProperty(value = "Optional description about the variable.")
  
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ProcessArgumentValue _default(AnyOfobjectstringnumberarraybooleanmap _default) {
    this._default = _default;
    return this;
  }

  /**
   * Whenever no value for the variable is defined, the default value is used.
   * @return _default
   **/
  @JsonProperty("default")
  @ApiModelProperty(value = "Whenever no value for the variable is defined, the default value is used.")
  @Valid 
  public AnyOfobjectstringnumberarraybooleanmap getDefault() {
    return _default;
  }

  public void setDefault(AnyOfobjectstringnumberarraybooleanmap _default) {
    this._default = _default;
  }

  public ProcessArgumentValue fromNode(String fromNode) {
    this.fromNode = fromNode;
    return this;
  }

  /**
   * The ID of the node that data is expected to come from.
   * @return fromNode
   **/
  @JsonProperty("from_node")
  @ApiModelProperty(required = true, value = "The ID of the node that data is expected to come from.")
  @NotNull 
  public String getFromNode() {
    return fromNode;
  }

  public void setFromNode(String fromNode) {
    this.fromNode = fromNode;
  }

  public ProcessArgumentValue fromArgument(String fromArgument) {
    this.fromArgument = fromArgument;
    return this;
  }

  /**
   * The name of the parameter that is made available to a callback by a calling process.
   * @return fromArgument
   **/
  @JsonProperty("from_argument")
  @ApiModelProperty(required = true, value = "The name of the parameter that is made available to a callback by a calling process.")
  @NotNull 
  public String getFromArgument() {
    return fromArgument;
  }

  public void setFromArgument(String fromArgument) {
    this.fromArgument = fromArgument;
  }

  public ProcessArgumentValue callback(Map<String, ProcessNode> callback) {
    this.callback = callback;
    return this;
  }

  public ProcessArgumentValue putCallbackItem(String key, ProcessNode callbackItem) {
    this.callback.put(key, callbackItem);
    return this;
  }

  /**
   * A process graph defines a graph-like structure as a connected set of executable processes. Each key is a unique identifier (node id) that is used to refer to the process in the graph.
   * @return callback
   **/
  @JsonProperty("callback")
  @ApiModelProperty(example = "{\"dc\":{\"process_id\":\"load_collection\",\"arguments\":{\"id\":\"Sentinel-2\",\"spatial_extent\":{\"west\":16.1,\"east\":16.6,\"north\":48.6,\"south\":47.2},\"temporal_extent\":[\"2018-01-01\",\"2018-02-01\"]}},\"bands\":{\"process_id\":\"filter_bands\",\"description\":\"Filter and order the bands. The order is important for the following reduce operation.\",\"arguments\":{\"data\":{\"from_node\":\"dc\"},\"bands\":[\"B08\",\"B04\",\"B02\"]}},\"evi\":{\"process_id\":\"reduce\",\"description\":\"Compute the EVI. Formula: 2.5 * (NIR - RED) / (1 + NIR + 6*RED + -7.5*BLUE)\",\"arguments\":{\"data\":{\"from_node\":\"bands\"},\"dimension\":\"spectral\",\"reducer\":{\"callback\":{\"nir\":{\"process_id\":\"array_element\",\"arguments\":{\"data\":{\"from_argument\":\"data\"},\"index\":0}},\"red\":{\"process_id\":\"array_element\",\"arguments\":{\"data\":{\"from_argument\":\"data\"},\"index\":1}},\"blue\":{\"process_id\":\"array_element\",\"arguments\":{\"data\":{\"from_argument\":\"data\"},\"index\":2}},\"sub\":{\"process_id\":\"subtract\",\"arguments\":{\"data\":[{\"from_node\":\"nir\"},{\"from_node\":\"red\"}]}},\"p1\":{\"process_id\":\"product\",\"arguments\":{\"data\":[6,{\"from_node\":\"red\"}]}},\"p2\":{\"process_id\":\"product\",\"arguments\":{\"data\":[-7.5,{\"from_node\":\"blue\"}]}},\"sum\":{\"process_id\":\"sum\",\"arguments\":{\"data\":[1,{\"from_node\":\"nir\"},{\"from_node\":\"p1\"},{\"from_node\":\"p2\"}]}},\"div\":{\"process_id\":\"divide\",\"arguments\":{\"data\":[{\"from_node\":\"sub\"},{\"from_node\":\"sum\"}]}},\"p3\":{\"process_id\":\"product\",\"arguments\":{\"data\":[2.5,{\"from_node\":\"div\"}]},\"result\":true}}}}},\"mintime\":{\"process_id\":\"reduce\",\"description\":\"Compute a minimum time composite by reducing the temporal dimension\",\"arguments\":{\"data\":{\"from_node\":\"evi\"},\"dimension\":\"temporal\",\"reducer\":{\"callback\":{\"min\":{\"process_id\":\"min\",\"arguments\":{\"data\":{\"from_argument\":\"data\"}},\"result\":true}}}}},\"save\":{\"process_id\":\"save_result\",\"arguments\":{\"data\":{\"from_node\":\"mintime\"},\"format\":\"GTiff\"},\"result\":true}}", required = true, value = "A process graph defines a graph-like structure as a connected set of executable processes. Each key is a unique identifier (node id) that is used to refer to the process in the graph.")
  @NotNull @Valid 
  public Map<String, ProcessNode> getCallback() {
    return callback;
  }

  public void setCallback(Map<String, ProcessNode> callback) {
    this.callback = callback;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessArgumentValue processArgumentValue = (ProcessArgumentValue) o;
    return Objects.equals(this.variableId, processArgumentValue.variableId) &&
        Objects.equals(this.type, processArgumentValue.type) &&
        Objects.equals(this.description, processArgumentValue.description) &&
        Objects.equals(this._default, processArgumentValue._default) &&
        Objects.equals(this.fromNode, processArgumentValue.fromNode) &&
        Objects.equals(this.fromArgument, processArgumentValue.fromArgument) &&
        Objects.equals(this.callback, processArgumentValue.callback);
  }

  @Override
  public int hashCode() {
    return Objects.hash(variableId, type, description, _default, fromNode, fromArgument, callback);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessArgumentValue {\n");
    
    sb.append("    variableId: ").append(toIndentedString(variableId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    fromNode: ").append(toIndentedString(fromNode)).append("\n");
    sb.append("    fromArgument: ").append(toIndentedString(fromArgument)).append("\n");
    sb.append("    callback: ").append(toIndentedString(callback)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

