/*
 * openEO API
 * The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.   **Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:  * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.2/cors/index.html) to allow browser-based access to the API.  * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.2/errors/index.html)  * Unless otherwise stated the API works *case sensitive*.
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: openeo@list.tuwien.ac.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.openeo.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import eu.openeo.model.AnyOfobjectstringnumberarraybooleanmap;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Process graphs can hold a variable, which can be filled in later. For shared process graphs this can be useful to make them more portable, e.g in case a back-end specific product name would be stored with the process graph.  If a process graph with a variable is about to be executed and neither a value nor a default value is specified, the back-end MUST reject the request with an error of type &#x60;VariableValueMissing&#x60;. The values are usually defined when loading the process graph with the &#x60;run_process_graph&#x60; process.  Invalid variable types MUST be rejected with error &#x60;VariableTypeInvalid&#x60;. If the default value is not compatible to the specified type an &#x60;VariableDefaultValueTypeInvalid&#x60; error MUST be sent. Invalid variable ids MUST be rejected with error &#x60;VariableIdInvalid&#x60;. 
 */
@ApiModel(description = "Process graphs can hold a variable, which can be filled in later. For shared process graphs this can be useful to make them more portable, e.g in case a back-end specific product name would be stored with the process graph.  If a process graph with a variable is about to be executed and neither a value nor a default value is specified, the back-end MUST reject the request with an error of type `VariableValueMissing`. The values are usually defined when loading the process graph with the `run_process_graph` process.  Invalid variable types MUST be rejected with error `VariableTypeInvalid`. If the default value is not compatible to the specified type an `VariableDefaultValueTypeInvalid` error MUST be sent. Invalid variable ids MUST be rejected with error `VariableIdInvalid`. ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-07-22T13:33:50.326+02:00[Europe/Rome]")
public class Variable  implements Serializable {
  @JsonProperty("variable_id")
  private String variableId;

  /**
   * The value for type is the expected data type for the content of the variable. &#x60;null&#x60; is allowed for all types.
   */
  public enum TypeEnum {
    STRING("string"),
    
    NUMBER("number"),
    
    INTEGER("integer"),
    
    BOOLEAN("boolean"),
    
    ARRAY("array"),
    
    OBJECT("object");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("type")
  private TypeEnum type = TypeEnum.STRING;

  @JsonProperty("description")
  private String description;

  @JsonProperty("default")
  private AnyOfobjectstringnumberarraybooleanmap _default = null;

  public Variable variableId(String variableId) {
    this.variableId = variableId;
    return this;
  }

  /**
   * The name of the variable. Can be any valid JSON key, but it is RECOMMENDED to use snake case and limit the characters to &#x60;a-z&#x60;, &#x60;0-9&#x60; and &#x60;_&#x60;.
   * @return variableId
   **/
  @JsonProperty("variable_id")
  @ApiModelProperty(required = true, value = "The name of the variable. Can be any valid JSON key, but it is RECOMMENDED to use snake case and limit the characters to `a-z`, `0-9` and `_`.")
  @NotNull 
  public String getVariableId() {
    return variableId;
  }

  public void setVariableId(String variableId) {
    this.variableId = variableId;
  }

  public Variable type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The value for type is the expected data type for the content of the variable. &#x60;null&#x60; is allowed for all types.
   * @return type
   **/
  @JsonProperty("type")
  @ApiModelProperty(value = "The value for type is the expected data type for the content of the variable. `null` is allowed for all types.")
  
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Variable description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional description about the variable.
   * @return description
   **/
  @JsonProperty("description")
  @ApiModelProperty(value = "Optional description about the variable.")
  
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Variable _default(AnyOfobjectstringnumberarraybooleanmap _default) {
    this._default = _default;
    return this;
  }

  /**
   * Whenever no value for the variable is defined, the default value is used.
   * @return _default
   **/
  @JsonProperty("default")
  @ApiModelProperty(value = "Whenever no value for the variable is defined, the default value is used.")
  @Valid 
  public AnyOfobjectstringnumberarraybooleanmap getDefault() {
    return _default;
  }

  public void setDefault(AnyOfobjectstringnumberarraybooleanmap _default) {
    this._default = _default;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Variable variable = (Variable) o;
    return Objects.equals(this.variableId, variable.variableId) &&
        Objects.equals(this.type, variable.type) &&
        Objects.equals(this.description, variable.description) &&
        Objects.equals(this._default, variable._default);
  }

  @Override
  public int hashCode() {
    return Objects.hash(variableId, type, description, _default);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Variable {\n");
    
    sb.append("    variableId: ").append(toIndentedString(variableId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

