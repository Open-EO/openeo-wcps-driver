/*
 * OpenEO API
 * The OpenEO API specification for interoperable cloud-based processing of large Earth observation datasets. **This early draft version is incomplete and intended for working on a prototype and a proof of concept.** Things that are currently missing particularly include:   * Authentication and authorization with OAuth 2.0,   * how results of computations can be downloaded,   * how data is streamed into UDFs and how the output of UDFs is returned,   * how services are organized as microservices,   * how payments can be handled,  * how resources (e.g. process graphs) can be shared,  * and how OpenSearch is interfaced
 *
 * OpenAPI spec version: 0.0.2
 * Contact: marius.appel@uni-muenster.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package eu.openeo.model;

import java.io.Serializable;
import java.util.Objects;

import javax.validation.constraints.NotNull;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Defines an object schema to define an image collection based on available EO
 * data. This is part of the process graph. See the process graph documentation
 * for more information.
 */
@ApiModel(description = "Defines an object schema to define an image collection based on available EO data. This is part of the process graph. See the process graph documentation for more information.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2018-02-26T14:26:50.688+01:00")
public class ImageCollection implements Serializable {
	@JsonProperty("product_id")
	private String productId = null;

	public ImageCollection productId(String productId) {
		this.productId = productId;
		return this;
	}

	/**
	 * The unique identifier of the EO data.
	 * 
	 * @return productId
	 **/
	@JsonProperty("product_id")
	@ApiModelProperty(required = true, value = "The unique identifier of the EO data.")
	@NotNull
	public String getProductId() {
		return productId;
	}

	public void setProductId(String productId) {
		this.productId = productId;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ImageCollection imageCollection = (ImageCollection) o;
		return Objects.equals(this.productId, imageCollection.productId);
	}

	@Override
	public int hashCode() {
		return Objects.hash(productId);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ImageCollection {\n");

		sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}
}
