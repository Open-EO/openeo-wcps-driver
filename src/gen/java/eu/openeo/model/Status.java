/*
 * openEO API
 * The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.   **Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:  * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.0/cors/index.html) to allow browser-based access to the API.  * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.0/errors/index.html)  * Unless otherwise stated the API works *case sensitive*.
 *
 * OpenAPI spec version: 0.4.0
 * Contact: openeo@list.tuwien.ac.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.openeo.model;

import java.util.Objects;
import io.swagger.annotations.ApiModel;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

import com.fasterxml.jackson.annotation.JsonCreator;

/**
 * The current status of a batch job.  The following status changes can occur: * &#x60;POST /jobs&#x60;: The status is initialized as &#x60;submitted&#x60;. * &#x60;POST /jobs/{job_id}/results&#x60;: The status is set to &#x60;queued&#x60;, if processing doesn&#39;t start instantly.     * Once the processing starts the status is set to &#x60;running&#x60;.     * Once the data is available to download the status is set to &#x60;finished&#x60;.     * Whenever an error occurs during processing, the status must be set to &#x60;error&#x60;. * &#x60;DELETE /jobs/{job_id}/results&#x60;: The status is set to &#x60;canceled&#x60; if the status was &#x60;running&#x60; beforehand and partial or preliminary results are available to be downloaded. Otherwise the status ist set to &#x60;submitted&#x60;. 
 */
public enum Status {
  
  SUBMITTED("submitted"),
  
  QUEUED("queued"),
  
  RUNNING("running"),
  
  CANCELED("canceled"),
  
  FINISHED("finished"),
  
  ERROR("error");

  private String value;

  Status(String value) {
    this.value = value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static Status fromValue(String text) {
    for (Status b : Status.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + text + "'");
  }
}

