/*
 * openEO API
 * The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.   **Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:  * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.2/cors/index.html) to allow browser-based access to the API.  * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.2/errors/index.html)  * Unless otherwise stated the API works *case sensitive*.
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: openeo@list.tuwien.ac.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.openeo.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * ProcessParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-07-22T13:33:50.326+02:00[Europe/Rome]")
public class ProcessParameter  implements Serializable {
  @JsonProperty("description")
  private String description;

  @JsonProperty("required")
  private Boolean required = false;

  @JsonProperty("deprecated")
  private Boolean deprecated = false;

  @JsonProperty("experimental")
  private Boolean experimental = false;

  @JsonProperty("media_type")
  private String mediaType = "application/json";

  @JsonProperty("schema")
  private Object schema = null;

  public ProcessParameter description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Detailed description to fully explain the entity.  [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation. In addition to the CommonMark syntax, clients can convert process IDs that are formatted as in the following example into links instead of code blocks: &#x60;&#x60;&#x60; &#x60;&#x60;process_id()&#x60;&#x60; &#x60;&#x60;&#x60;
   * @return description
   **/
  @JsonProperty("description")
  @ApiModelProperty(required = true, value = "Detailed description to fully explain the entity.  [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation. In addition to the CommonMark syntax, clients can convert process IDs that are formatted as in the following example into links instead of code blocks: ``` ``process_id()`` ```")
  @NotNull 
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ProcessParameter required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Determines whether this parameter is mandatory.
   * @return required
   **/
  @JsonProperty("required")
  @ApiModelProperty(value = "Determines whether this parameter is mandatory.")
  
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }

  public ProcessParameter deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

  /**
   * Specifies that the process or parameter is deprecated with the potential to   be removed in any of the next versions. It should   be transitioned out of usage as soon as possible and users   should refrain from using it in new implementations.
   * @return deprecated
   **/
  @JsonProperty("deprecated")
  @ApiModelProperty(value = "Specifies that the process or parameter is deprecated with the potential to   be removed in any of the next versions. It should   be transitioned out of usage as soon as possible and users   should refrain from using it in new implementations.")
  
  public Boolean getDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }

  public ProcessParameter experimental(Boolean experimental) {
    this.experimental = experimental;
    return this;
  }

  /**
   * Declares the process or parameter to be experimental, which means that it   is likely to change or may produce unpredictable behaviour.   Users should refrain from using it in production,   but still feel encouraged to try it out and give feedback.
   * @return experimental
   **/
  @JsonProperty("experimental")
  @ApiModelProperty(value = "Declares the process or parameter to be experimental, which means that it   is likely to change or may produce unpredictable behaviour.   Users should refrain from using it in production,   but still feel encouraged to try it out and give feedback.")
  
  public Boolean getExperimental() {
    return experimental;
  }

  public void setExperimental(Boolean experimental) {
    this.experimental = experimental;
  }

  public ProcessParameter mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * The media (MIME) type that the value is encoded in.
   * @return mediaType
   **/
  @JsonProperty("media_type")
  @ApiModelProperty(value = "The media (MIME) type that the value is encoded in.")
  
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }

  public ProcessParameter schema(Object schema) {
    this.schema = schema;
    return this;
  }

  /**
   * A schema object according to the specification of [JSON Schema draft-07](http://json-schema.org/). Additional values for &#x60;format&#x60; are defined [centrally in the API documentation](https://open-eo.github.io/openeo-api/v/0.4.2/processes/index.html), e.g. bbox or crs. Callback parameters are defined with the custom schema keyword &#x60;parameters&#x60;.
   * @return schema
   **/
  @JsonProperty("schema")
  @ApiModelProperty(required = true, value = "A schema object according to the specification of [JSON Schema draft-07](http://json-schema.org/). Additional values for `format` are defined [centrally in the API documentation](https://open-eo.github.io/openeo-api/v/0.4.2/processes/index.html), e.g. bbox or crs. Callback parameters are defined with the custom schema keyword `parameters`.")
  @NotNull @Valid 
  public Object getSchema() {
    return schema;
  }

  public void setSchema(Object schema) {
    this.schema = schema;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessParameter processParameter = (ProcessParameter) o;
    return Objects.equals(this.description, processParameter.description) &&
        Objects.equals(this.required, processParameter.required) &&
        Objects.equals(this.deprecated, processParameter.deprecated) &&
        Objects.equals(this.experimental, processParameter.experimental) &&
        Objects.equals(this.mediaType, processParameter.mediaType) &&
        Objects.equals(this.schema, processParameter.schema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, required, deprecated, experimental, mediaType, schema);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessParameter {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    experimental: ").append(toIndentedString(experimental)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

