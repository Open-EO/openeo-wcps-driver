/*
 * OpenEO API
 * The OpenEO API specification for interoperable cloud-based processing of large Earth observation datasets. **This early draft version is incomplete and intended for working on a prototype and a proof of concept.** Things that are currently missing particularly include:   * Authentication and authorization with OAuth 2.0,   * how results of computations can be downloaded,   * how data is streamed into UDFs and how the output of UDFs is returned,   * how services are organized as microservices,   * how payments can be handled,  * how resources (e.g. process graphs) can be shared,  * and how OpenSearch is interfaced
 *
 * OpenAPI spec version: 0.0.2
 * Contact: marius.appel@uni-muenster.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package eu.openeo.model;

import java.io.Serializable;
import java.util.Objects;

import javax.validation.constraints.NotNull;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * **DEFAULT VALUES FOR ARGUMENTS ARE NOT FORMALIZED IN THE SWAGGER 2.0
 * DEFINITION DUE TO MISSING SUPPORT FOR oneOf OR anyOf SCHEMA COMBINATIONS.**
 */
@ApiModel(description = "**DEFAULT VALUES FOR ARGUMENTS ARE NOT FORMALIZED IN THE SWAGGER 2.0 DEFINITION DUE TO MISSING SUPPORT FOR oneOf OR anyOf SCHEMA COMBINATIONS.**")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2018-02-26T14:26:50.688+01:00")
public class ProcessDescriptionArgs implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = -2974393311661717237L;

	@JsonProperty("description")
	private String description = null;
	
	@JsonProperty("dependencies")
	private String dependencies = null;
	
	@JsonProperty("deprecated")
	private String[] deprecated = null;

	@JsonProperty("required")
	private Boolean required = true;
	
	@JsonProperty("schema")
	private Schema schema =  null;

	@JsonProperty("mime_type")
	private String mimetype =  null;
	
	public ProcessDescriptionArgs description(String description) {
		this.description = description;
		return this;
	}

	/**
	 * A short and concise description of the process argument.
	 * 
	 * @return description
	 **/
	@JsonProperty("description")
	@ApiModelProperty(required = true, value = "Detailed description of the process argument.")
	@NotNull
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}
	
	@JsonProperty("dependencies")
	@ApiModelProperty(required = false, value = "A list of parameters that influence this parameter or this parameter depends on.")
	@NotNull
	public String getDependencies() {
		return dependencies;
	}

	public void setDependencies(String dependencies) {
		this.dependencies = dependencies;
	}
	
	@JsonProperty("deprecated")
	@ApiModelProperty(required = false, value = "Specifies that a parameter is deprecated and SHOULD be transitioned out of usage.")
	@NotNull
	public String[] getDeprecated() {
		return deprecated;
	}

	public void setDeprecated(String[] deprecated) {
		this.deprecated = deprecated;
	}
	
	@JsonProperty("schema")
	@ApiModelProperty(required = true, value = "A schema object according to the specification of JSON Schema draft-07. Additional values for format are defined centrally in the API documentation, e.g. bbox or crs")
	@NotNull
	public Schema getSchema() {
		return schema;
	}
	
	public void setSchema(Schema schema) {
		this.schema = schema;
	}
	
	
	@JsonProperty("mime_type")
	@ApiModelProperty(required = true, value = "The mime type that the parameter is formatted with")
	@NotNull
	public String getMimetype() {
		return mimetype;
	}
	
	public void setMimetype(String mimetype) {
		this.mimetype = mimetype;
	}

	public ProcessDescriptionArgs required(Boolean required) {
		this.required = required;
		return this;
	}

	/**
	 * Defines whether an argument is required or optional.
	 * 
	 * @return required
	 **/
	@JsonProperty("required")
	@ApiModelProperty(value = "Defines whether an argument is required or optional.")
	public Boolean isRequired() {
		return required;
	}

	public void setRequired(Boolean required) {
		this.required = required;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ProcessDescriptionArgs parameters = (ProcessDescriptionArgs) o;
		return Objects.equals(this.description, parameters.description)
				&& Objects.equals(this.dependencies, parameters.dependencies)
				&& Objects.equals(this.deprecated, parameters.deprecated)
				&& Objects.equals(this.schema, parameters.schema)
				&& Objects.equals(this.mimetype, parameters.mimetype)
				&& Objects.equals(this.required, parameters.required);
	}

	@Override
	public int hashCode() {
		return Objects.hash(description, required, dependencies, deprecated, schema, mimetype);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ProcessDescriptionArgs {\n");

		sb.append("    description: ").append(toIndentedString(description)).append("\n");
		sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
		sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
		sb.append("    required: ").append(toIndentedString(required)).append("\n");
		sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
		sb.append("    mime_type: ").append(toIndentedString(mimetype)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}
}