/*
 * openEO API
 * The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.   **Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:  * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.2/cors/index.html) to allow browser-based access to the API.  * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.2/errors/index.html)  * Unless otherwise stated the API works *case sensitive*.
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: openeo@list.tuwien.ac.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package eu.openeo.model;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.annotations.ApiModelProperty;

/**
 * ProcessNode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-07-22T13:33:50.326+02:00[Europe/Rome]")
public class ProcessNode implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 8078914123921779322L;

	@JsonProperty("process_id")
	private String processId;

	@JsonProperty("result")
	private Boolean result = false;

	@JsonProperty("description")
	private String description;

	@JsonProperty("arguments")
	private Map<String, ProcessArgumentValue> arguments = new HashMap<String, ProcessArgumentValue>();

	public ProcessNode processId(String processId) {
		this.processId = processId;
		return this;
	}

	/**
	 * Unique identifier of the process.
	 * 
	 * @return processId
	 **/
	@JsonProperty("process_id")
	@ApiModelProperty(example = "ndvi", required = true, value = "Unique identifier of the process.")
	@NotNull
	@Pattern(regexp = "^[A-Za-z0-9_]+$")
	public String getProcessId() {
		return processId;
	}

	public void setProcessId(String processId) {
		this.processId = processId;
	}

	public ProcessNode result(Boolean result) {
		this.result = result;
		return this;
	}

	/**
	 * Used to specify which node is the last in the chain and returns the result to
	 * return to the requesting context. This flag MUST only be set once in each
	 * list of process nodes.
	 * 
	 * @return result
	 **/
	@JsonProperty("result")
	@ApiModelProperty(value = "Used to specify which node is the last in the chain and returns the result to return to the requesting context. This flag MUST only be set once in each list of process nodes.")

	public Boolean getResult() {
		return result;
	}

	public void setResult(Boolean result) {
		this.result = result;
	}

	public ProcessNode description(String description) {
		this.description = description;
		return this;
	}

	/**
	 * Optional description about the process and its arguments.
	 * 
	 * @return description
	 **/
	@JsonProperty("description")
	@ApiModelProperty(value = "Optional description about the process and its arguments.")

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public ProcessNode arguments(Map<String, ProcessArgumentValue> arguments) {
		this.arguments = arguments;
		return this;
	}

	public ProcessNode putArgumentsItem(String key, ProcessArgumentValue argumentsItem) {
		this.arguments.put(key, argumentsItem);
		return this;
	}

	/**
	 * Get arguments
	 * 
	 * @return arguments
	 **/
	@JsonProperty("arguments")
	@ApiModelProperty(required = true, value = "")
	@NotNull
	@Valid
	public Map<String, ProcessArgumentValue> getArguments() {
		return arguments;
	}

	public void setArguments(Map<String, ProcessArgumentValue> arguments) {
		this.arguments = arguments;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ProcessNode processNode = (ProcessNode) o;
		return Objects.equals(this.processId, processNode.processId) && Objects.equals(this.result, processNode.result)
				&& Objects.equals(this.description, processNode.description)
				&& Objects.equals(this.arguments, processNode.arguments);
	}

	@Override
	public int hashCode() {
		return Objects.hash(processId, result, description, arguments);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ProcessNode {\n");

		sb.append("    processId: ").append(toIndentedString(processId)).append("\n");
		sb.append("    result: ").append(toIndentedString(result)).append("\n");
		sb.append("    description: ").append(toIndentedString(description)).append("\n");
		sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}
}
