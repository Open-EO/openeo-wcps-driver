/*
 * OpenEO API
 * The OpenEO API specification for interoperable cloud-based processing of large Earth observation datasets. **This early draft version is incomplete and intended for working on a prototype and a proof of concept.** Things that are currently missing particularly include:   * Authentication and authorization with OAuth 2.0,   * how results of computations can be downloaded,   * how data is streamed into UDFs and how the output of UDFs is returned,   * how services are organized as microservices,   * how payments can be handled,   * and how OpenSearch is interfaced
 *
 * OpenAPI spec version: 0.0.1
 * Contact: marius.appel@uni-muenster.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.model;

import java.math.BigDecimal;
import java.util.Objects;

import javax.validation.constraints.NotNull;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Defines metadata of processing jobs that have been submitted by users.
 */
@ApiModel(description = "Defines metadata of processing jobs that have been submitted by users.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2018-01-23T11:10:18.550+01:00")
public class Job   {
  @JsonProperty("job_id")
  private String jobId = null;

  /**
   * The current status of the job.
   */
  public enum StatusEnum {
    SUBMITTED("submitted"),
    
    RUNNING("running"),
    
    FINISHED("finished"),
    
    CANCELED("canceled"),
    
    ERROR("error"),
    
    UNKNOWN("unknown"),
    
    WAITING("waiting");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("status")
  private StatusEnum status = null;

  @JsonProperty("process_graph")
  private ProcessGraph processGraph = null;

  @JsonProperty("view")
  private View view = null;

  @JsonProperty("submitted")
  private String submitted = null;

  @JsonProperty("last_update")
  private String lastUpdate = null;

  @JsonProperty("user_id")
  private String userId = null;

  @JsonProperty("consumed_credits")
  private BigDecimal consumedCredits = null;

  public Job jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Unique identifier of a job that is generated by the back-end during job submission.
   * @return jobId
   **/
  @JsonProperty("job_id")
  @ApiModelProperty(required = true, value = "Unique identifier of a job that is generated by the back-end during job submission.")
  @NotNull
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }

  public Job status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The current status of the job.
   * @return status
   **/
  @JsonProperty("status")
  @ApiModelProperty(required = true, value = "The current status of the job.")
  @NotNull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public Job processGraph(ProcessGraph processGraph) {
    this.processGraph = processGraph;
    return this;
  }

  /**
   * Get processGraph
   * @return processGraph
   **/
  @JsonProperty("process_graph")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public ProcessGraph getProcessGraph() {
    return processGraph;
  }

  public void setProcessGraph(ProcessGraph processGraph) {
    this.processGraph = processGraph;
  }

  public Job view(View view) {
    this.view = view;
    return this;
  }

  /**
   * Get view
   * @return view
   **/
  @JsonProperty("view")
  @ApiModelProperty(value = "")
  public View getView() {
    return view;
  }

  public void setView(View view) {
    this.view = view;
  }

  public Job submitted(String submitted) {
    this.submitted = submitted;
    return this;
  }

  /**
   * Date and time of job submission in ISO 8601 format
   * @return submitted
   **/
  @JsonProperty("submitted")
  @ApiModelProperty(value = "Date and time of job submission in ISO 8601 format")
  public String getSubmitted() {
    return submitted;
  }

  public void setSubmitted(String submitted) {
    this.submitted = submitted;
  }

  public Job lastUpdate(String lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

  /**
   * Date and time of last status change in ISO 8601 format
   * @return lastUpdate
   **/
  @JsonProperty("last_update")
  @ApiModelProperty(value = "Date and time of last status change in ISO 8601 format")
  public String getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(String lastUpdate) {
    this.lastUpdate = lastUpdate;
  }

  public Job userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Identifier of the user, who submitted the job and pays incurred costs if needed.
   * @return userId
   **/
  @JsonProperty("user_id")
  @ApiModelProperty(required = true, value = "Identifier of the user, who submitted the job and pays incurred costs if needed.")
  @NotNull
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }

  public Job consumedCredits(BigDecimal consumedCredits) {
    this.consumedCredits = consumedCredits;
    return this;
  }

  /**
   * Credits consumed by this process
   * @return consumedCredits
   **/
  @JsonProperty("consumed_credits")
  @ApiModelProperty(value = "Credits consumed by this process")
  public BigDecimal getConsumedCredits() {
    return consumedCredits;
  }

  public void setConsumedCredits(BigDecimal consumedCredits) {
    this.consumedCredits = consumedCredits;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Job job = (Job) o;
    return Objects.equals(this.jobId, job.jobId) &&
        Objects.equals(this.status, job.status) &&
        Objects.equals(this.processGraph, job.processGraph) &&
        Objects.equals(this.view, job.view) &&
        Objects.equals(this.submitted, job.submitted) &&
        Objects.equals(this.lastUpdate, job.lastUpdate) &&
        Objects.equals(this.userId, job.userId) &&
        Objects.equals(this.consumedCredits, job.consumedCredits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, status, processGraph, view, submitted, lastUpdate, userId, consumedCredits);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Job {\n");
    
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    processGraph: ").append(toIndentedString(processGraph)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("    submitted: ").append(toIndentedString(submitted)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    consumedCredits: ").append(toIndentedString(consumedCredits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

